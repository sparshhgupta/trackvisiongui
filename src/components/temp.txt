import React, { useState } from "react";
import axios from 'axios';

function UploadSection({ onCsvUpload }) {
  const [csvUploaded, setCsvUploaded] = useState(false);
  const [logEntries, setLogEntries] = useState([]);
  const [frameNumber, setFrameNumber] = useState("");
  const [A, setA] = useState("");
  const [B, setB] = useState("");

  // const handleCsvUpload = (event) => {
  //   const file = event.target.files[0];
  //   if (file) {
  //     onCsvUpload(file);
  //     setCsvUploaded(true); // Hide upload button and show table
  //   }
  // };
  const handleCsvUpload = async (event) => {
    const file = event.target.files[0];
    if (file && file.type === 'text/csv') {
      const formData = new FormData();
      formData.append('csv', file);

      try {
        // Post request to upload the CSV file
        const response = await axios.post('http://127.0.0.1:5000/upload', formData, {
          responseType: 'blob', // Expecting a binary response for the video
        });

        // Check if the response is a valid file
        if (response.status === 200) {
          const contentDisposition = response.headers['content-disposition'];
          const filename = contentDisposition 
            ? contentDisposition.split('filename=')[1]?.replace(/"/g, '') 
            : 'processed_video.mp4';

          // Create a Blob URL for the video file
          const url = window.URL.createObjectURL(new Blob([response.data]));
          
          // Set the Blob URL as the video player's source
          const videoPlayer = document.querySelector('video');
          if (videoPlayer) {
            videoPlayer.src = url;
            videoPlayer.load();
          }

          alert('CSV file processed successfully. Video updated.');
          onCsvUpload(file); // Pass CSV file to parent component (optional)
        } else {
          alert('Error processing the CSV file.');
        }
      } catch (error) {
        console.error('CSV upload error:', error.response || error);
        alert(`Error uploading CSV file: ${error.response ? error.response.data : error.message}`);
      }
    } else {
      alert('Please upload a valid CSV file.');
    }
    if (file) {
          // onCsvUpload(file);
          setCsvUploaded(true); // Hide upload button and show table
      }
  };

  const handleLogChanges = () => {
    if (!frameNumber.trim() || !A.trim() || !B.trim()) {
      alert("Please enter all values before logging.");
      return;
    }
    
    setLogEntries([...logEntries, { frameNumber, A, B }]);
    setFrameNumber(""); // Reset fields
    setA("");
    setB("");
  };

  const handleClearTable = async () => {
    if (logEntries.length === 0) {
      alert("No data to send.");
      return;
    }
  
    try {
      const response = await fetch("http://localhost:5000/save-logs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ logs: logEntries }),
      });
  
      if (response.ok) {
        alert("Logs successfully saved to backend.");
        setLogEntries([]); // Clear table after successful request
      } else {
        alert("Failed to save logs.");
      }
    } catch (error) {
      console.error("Error sending logs:", error);
      alert("Error sending logs to backend.");
    }
  };
  

  return (
    <div className="upload-section">
      {!csvUploaded ? (
        <>
          <label htmlFor="csv-upload" className="upload-btn">Upload CSV</label>
          <input
            id="csv-upload"
            type="file"
            accept=".csv"
            style={{ display: "none" }}
            onChange={handleCsvUpload}
          />
        </>
      ) : (
        <div className="log-section">
          <h3>Log Table</h3>
          <input
            type="text"
            placeholder="Frame Number"
            value={frameNumber}
            onChange={(e) => setFrameNumber(e.target.value)}
          />
          <input
            type="text"
            placeholder="A"
            value={A}
            onChange={(e) => setA(e.target.value)}
          />
          <input
            type="text"
            placeholder="B"
            value={B}
            onChange={(e) => setB(e.target.value)}
          />
          <button onClick={handleLogChanges}>Log Changes</button>
          <button onClick={handleClearTable}>Clear Table</button>

          {logEntries.length > 0 && (
            <table className="log-table">
              <thead>
                <tr>
                  <th>Frame Number</th>
                  <th>A</th>
                  <th>B</th>
                </tr>
              </thead>
              <tbody>
                {logEntries.map((entry, index) => (
                  <tr key={index}>
                    <td>{entry.frameNumber}</td>
                    <td>{entry.A}</td>
                    <td>{entry.B}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      )}
    </div>
  );
}

export default UploadSection;
