{"version":3,"sources":["components/LandingPage.js","components/UploadSection.js","components/VideoPlayer.js","components/DownloadCsvButton.js","components/OutputsPage.js","components/AccessBar.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","navigate","useNavigate","React","createElement","className","onClick","exportedFrameNumbers","UploadSection","_ref","csvFile","onCsvUpload","csvUploaded","setCsvUploaded","useState","logEntries","setLogEntries","frameNumber","setFrameNumber","newClassId","setNewClassId","A","setA","B","setB","streamActive","setStreamActive","useEffect","type","placeholder","value","onChange","e","target","handleLogChanges","trim","alert","async","length","response","fetch","method","headers","body","JSON","stringify","logs","data","json","ok","success","mjpegImage","document","querySelector","baseUrl","timestamp","Date","now","src","message","error","console","map","entry","index","key","removeEntry","indexToRemove","filter","_","title","Fragment","htmlFor","id","accept","style","display","file","event","files","formData","FormData","append","axios","post","status","Error","_response$data","get","end_frames","join","fetchFrameNumbers","startMjpegStream","mjpegContainer","innerHTML","errorMessage","_error$response$data","statusText","VideoPlayer","streamSrc","setStreamSrc","isStreaming","setIsStreaming","showIdPopup","setShowIdPopup","currentId","setCurrentId","newId","setNewId","currentFrame","setCurrentFrame","frameData","setFrameData","frames","trackIds","currentTrackId","setCurrentTrackId","currentFrameIndex","setCurrentFrameIndex","isProcessing","setIsProcessing","streamRef","useRef","frameUpdateInterval","track_ids","log","startFrameTracking","stopFrameTracking","current","setInterval","undefined","current_frame","updateCurrentFrameIndex","warn","setTimeout","clearInterval","refreshStream","frame","findIndex","f","navigateToFrame","Promise","resolve","handleFrameSeek","startsWith","position","width","ref","alt","height","maxHeight","border","onError","is_playing","disabled","marginLeft","navigatePrev","closestPrevIndex","navigateNext","closestNextIndex","selectedFrame","parseInt","isNaN","includes","padding","min","onKeyPress","DownloadCsvButton","blob","url","window","URL","createObjectURL","a","href","download","appendChild","click","remove","revokeObjectURL","AnalyticsSection","icon","Icon","children","defaultOpen","isOpen","setIsOpen","size","ChevronDown","ChevronRight","MetricItem","_ref2","label","replace","l","toUpperCase","val","toLowerCase","toFixed","toString","TrackCard","_ref3","trackId","summary","trackStatus","duration","end_frame","start_frame","total_detections","gaps","avg_confidence","AnalyticsDashboard","analyticsData","setAnalyticsData","loading","setLoading","setError","showAnalytics","setShowAnalytics","trackIdSearch","setTrackIdSearch","frameSearch","setFrameSearch","trackStatusFilter","setTrackStatusFilter","getTrackStatus","filteredTracks","tracks","Object","entries","tracks_summary","_ref4","searchFrame","_ref5","_ref6","clearSearch","hasActiveFilters","maxWidth","margin","err","Info","getKeyMetrics","metrics","total_tracks","total_frames","avg_detections_per_frame","_ref8","BarChart3","getPerformanceMetrics","avg_track_duration","max_track_duration","min_track_duration","avg_track_fragmentation","avg_size_consistency","avg_confidence_stability","_ref9","Target","Search","X","getTrackStats","stats","all","excellent","good","fair","poor","forEach","_ref7","_ref10","count","keys","_ref11","AccessBar","displayMode","setDisplayMode","includeIds","setIncludeIds","excludeIds","setExcludeIds","filterInfo","setFilterInfo","closeAccessBar","handleDisplayModeChange","mode","triggerEndpoint","addToIncludeIds","updatedIds","isIdDuplicate","endpoint","ids","arguments","requestBody","fullUrl","responseData","errorText","text","totalIds","toggleAccessBar","aria-label","Menu","name","checked","addToExcludeIds","idToRemove","removeFromIncludeIds","Trash2","removeFromExcludeIds","applySpecificIdsFilter","RefreshCw","MainApp","setCsvFile","setEndFrames","darkMode","setDarkMode","handleCsvUploadSuccess","Sun","Moon","App","Routes","Route","path","element","OutputsPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","HashRouter"],"mappings":"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","file":"static/js/main.acbf5d7d.chunk.js","sourcesContent":["// src/components/LandingPage.js\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LandingPage.css';\r\n\r\nfunction LandingPage() {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"landing-container\">\r\n      <header className=\"landing-header\">\r\n        <h1>TrackVision</h1>\r\n        <p className=\"tagline\">The Smart Solution for Efficient Object Tracking Annotation</p>\r\n        <p className=\"subtagline\">Reduce manual review time with our workflow</p>\r\n      </header>\r\n\r\n      <section className=\"value-proposition\">\r\n        <div className=\"value-card\">\r\n          <h2>Stop Wasting Time Scanning Entire Videos</h2>\r\n          <p>Our system automatically detects potential ID switch frames from your tracking CSV, taking you straight to the critical moments that need verification.</p>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"features-section\">\r\n        <h2>Why Analysts Love TrackVision</h2>\r\n        <div className=\"features-grid\">\r\n          <div className=\"feature-card highlight-card\">\r\n            <h3>⏱️ Smart Frame Navigation</h3>\r\n            <p>Automatically jump to frames near potential ID switches - no more scrubbing through hours of footage.</p>\r\n          </div>\r\n          <div className=\"feature-card highlight-card\">\r\n            <h3>📊 Batch Processing</h3>\r\n            <p>Log multiple entries and process them in batches to minimize waiting time between operations.</p>\r\n          </div>\r\n          {/* <div className=\"feature-card highlight-card\">\r\n            <h3>📝 Intelligent Log Table</h3>\r\n            <p>Our persistent logging system remembers your work so you don't have to re-enter data for every session.</p>\r\n          </div> */}\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"how-it-works\">\r\n        <h2>How To Use the Tool</h2>\r\n        <div className=\"workflow-steps\">\r\n          <div className=\"step\">\r\n            <div className=\"step-number\">1</div>\r\n            <div className=\"step-content\">\r\n              <h3>Upload & Auto-Analyze</h3>\r\n              <p>Simply upload your video and tracking CSV. Our system extracts all track details and flags potential ID switches automatically.</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"step\">\r\n            <div className=\"step-number\">2</div>\r\n            <div className=\"step-content\">\r\n              <h3>Smart Navigation</h3>\r\n              <p>The tool takes you directly to frames where ID switches likely occurred, bypassing irrelevant footage.</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"step\">\r\n            <div className=\"step-number\">3</div>\r\n            <div className=\"step-content\">\r\n              <h3>Batch Correction</h3>\r\n              <p>Make all your annotations in our log table, then apply them in a single batch operation.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* <section className=\"testimonial\">\r\n        <blockquote>\r\n          \"TrackVision cut our video review time from 8 hours to just 90 minutes per project. The batch processing feature alone saves us 20+ hours each week.\"\r\n        </blockquote>\r\n        <p className=\"attribution\">- Senior Video Analyst, Autonomous Vehicle Company</p>\r\n      </section> */}\r\n\r\n      <div className=\"cta-section\">\r\n        <button \r\n          onClick={() => navigate('/app')}\r\n          className=\"start-button\"\r\n        >\r\n          Start Saving Time Now\r\n        </button>\r\n        {/* <p className=\"demo-text\">No installation required. Works directly in your browser.</p> */}\r\n        <p className=\"secondary-cta\">Try with our sample data to see the magic</p>\r\n      </div>\r\n\r\n      {/* <footer className=\"landing-footer\">\r\n        <div className=\"footer-content\">\r\n          <p>Trusted by video analysts at leading research institutions and tech companies</p>\r\n          <p>Questions? <a href=\"mailto:support@trackvision.com\">support@trackvision.com</a></p>\r\n        </div>\r\n      </footer> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport \"./UploadSection.css\";\n\n\n// frame_numbers = [30, 40, 50];\nlet exportedFrameNumbers = [];\n\nfunction UploadSection({ csvFile, onCsvUpload }) {\n  const [csvUploaded, setCsvUploaded] = useState(false);\n  const [logEntries, setLogEntries] = useState([]);\n  const [frameNumber, setFrameNumber] = useState(\"\");\n  const [newClassId, setNewClassId] = useState(\"\");\n  const [A, setA] = useState(\"\");\n  const [B, setB] = useState(\"\");\n  const [streamActive, setStreamActive] = useState(false);\n\n  useEffect(() => {\n    setCsvUploaded(!!csvFile);\n  }, [csvFile]);\n\n  const fetchFrameNumbers = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/get-frame-numbers');\n      if (response.data?.end_frames) {\n        exportedFrameNumbers = response.data.end_frames; // Update exported variable\n        alert(`Received frames: ${exportedFrameNumbers.join(', ')}`);\n      }\n    } catch (error) {\n      console.error('Error fetching frames:', error);\n    }\n  };\n\n  const startMjpegStream = () => {\n    const mjpegContainer = document.querySelector('#mjpeg-container');\n    if (mjpegContainer) {\n      const timestamp = Date.now();\n      mjpegContainer.innerHTML = `\n        <img \n          src=\"http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}\" \n          alt=\"MJPEG Stream\" \n          data-mjpeg-stream=\"true\"\n          style=\"max-width: 100%; height: auto; border: 1px solid #ccc;\"\n          onload=\"this.style.opacity = '1'\"\n          onerror=\"console.error('MJPEG stream error')\"\n        />\n      `;\n      setStreamActive(true);\n    }\n  };\n\n  const handleCsvUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (file.type !== 'text/csv') {\n      alert('Please upload a valid CSV file.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('csv', file);\n\n    try {\n      // Send CSV to backend for processing\n      const response = await axios.post('http://127.0.0.1:5000/upload-csv', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      if (response.status === 200) {\n        alert('CSV file processed successfully. Starting MJPEG stream...');\n        \n        // Fetch frame numbers after successful upload\n        await fetchFrameNumbers();\n        \n        // Start the MJPEG stream\n        startMjpegStream();\n        \n        onCsvUpload(file, exportedFrameNumbers);\n        setCsvUploaded(true);\n      } else {\n        throw new Error('Server returned non-200 status');\n      }\n    } catch (error) {\n      console.error('CSV upload error:', error);\n      \n      let errorMessage = 'Error uploading CSV file';\n      if (error.response) {\n        errorMessage = error.response.data?.message || error.response.statusText || errorMessage;\n      } else {\n        errorMessage = error.message || errorMessage;\n      }\n      \n      alert(errorMessage);\n    }\n  };\n\n  const handleLogChanges = () => {\n    if (!A.trim()) {\n      alert(\"Please enter the track id requiring modification before logging.\");\n      return;\n    }\n    \n    setLogEntries([...logEntries, { newClassId, A, B }]);\n    // setFrameNumber(\"\");\n    setNewClassId(\"\");\n    setA(\"\");\n    setB(\"\");\n  };\n\n  const handleClearTable = async () => {\n    if (logEntries.length === 0) {\n      alert(\"No data to send.\");\n      return;\n    }\n    \n    try {\n      const response = await fetch(\"http://localhost:5000/save-logs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ logs: logEntries }),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok && data.success) {\n        // For MJPEG stream, we just need to refresh the image source\n        // The backend will automatically serve the updated frames\n        const mjpegImage = document.querySelector('img[data-mjpeg-stream]');\n        if (mjpegImage) {\n          // Force refresh by adding timestamp to prevent caching\n          const baseUrl = `http://127.0.0.1:5000/mjpeg-stream`;\n          const timestamp = Date.now();\n          mjpegImage.src = `${baseUrl}?t=${timestamp}`;\n        }\n        alert(\"Logs successfully saved to backend. Stream will update automatically.\");\n        setLogEntries([]);\n      } else {\n        alert(data.message || \"Failed to update ID and reprocess video.\");\n      }\n    } catch (error) {\n      console.error(\"Error updating ID:\", error);\n      alert(error.message || \"Error updating ID.\");\n    }\n  };\n\n  const refreshStream = () => {\n    const mjpegImage = document.querySelector('img[data-mjpeg-stream]');\n    if (mjpegImage) {\n      const timestamp = Date.now();\n      mjpegImage.src = `http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}`;\n    }\n  };\n\n  const removeEntry = (indexToRemove) => {\n    setLogEntries(logEntries.filter((_, index) => index !== indexToRemove));\n  };\n\n  return (\n    <div className=\"upload-section\">\n      {!csvUploaded ? (\n        <>\n          <label htmlFor=\"csv-upload\" className=\"upload-btn\">Upload CSV</label>\n          <input\n            id=\"csv-upload\"\n            type=\"file\"\n            accept=\".csv\"\n            style={{ display: \"none\" }}\n            onChange={handleCsvUpload}\n          />\n        </>\n      ) : (\n        <div className=\"stream-section\">\n          {/* MJPEG Stream Container */}\n          {/* <div className=\"stream-container\">\n            <h3>Live Stream</h3>\n            <div id=\"mjpeg-container\" style={{ textAlign: 'center', marginBottom: '20px' }}>\n              {streamActive ? null : <p>Loading stream...</p>}\n            </div>\n            <button onClick={refreshStream} style={{ marginBottom: '20px' }}>\n              Refresh Stream\n            </button>\n          </div> */}\n\n          {/* Log Section */}\n          <div className=\"log-section\">\n            <h3 className=\"log-title\">Change Log</h3>\n            <div className=\"input-container\">\n              <div className=\"input-group\">\n                <input\n                  type=\"text\"\n                  placeholder=\"A\"\n                  value={A}\n                  onChange={(e) => setA(e.target.value)}\n                  className=\"styled-input\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"B\"\n                  value={B}\n                  onChange={(e) => setB(e.target.value)}\n                  className=\"styled-input\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"New Class ID\"\n                  value={newClassId}\n                  onChange={(e) => setNewClassId(e.target.value)}\n                  className=\"styled-input\"\n                />\n              </div>\n              <div className=\"button-group\">\n                <button onClick={handleLogChanges} className=\"btn-primary\">\n                  Register Changes\n                </button>\n                <button onClick={handleClearTable} className=\"btn-secondary\">\n                  Make Changes\n                </button>\n              </div>\n            </div>\n\n            {logEntries.length > 0 && (\n              <div className=\"table-container\">\n                <div className=\"table-header\">\n                  <span className=\"entry-count\">{logEntries.length} {logEntries.length === 1 ? 'Entry' : 'Entries'}</span>\n                </div>\n                <div className=\"table-wrapper\">\n                  <table className=\"log-table\">\n                    <thead>\n                      <tr>\n                        <th>Track ID</th>\n                        <th>Frame ID</th>\n                        <th>New Class ID</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {logEntries.map((entry, index) => (\n                        <tr key={index} className=\"table-row\">\n                          <td className=\"track-id\">{entry.A}</td>\n                          <td className=\"frame-id\">{entry.B}</td>\n                          <td className=\"class-id\">\n                            <span className=\"class-badge\">{entry.newClassId}</span>\n                          </td>\n                          <td className=\"actions\">\n                            <button \n                              onClick={() => removeEntry(index)}\n                              className=\"btn-remove\"\n                              title=\"Remove entry\"\n                            >\n                              ×\n                            </button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            )}\n\n            {logEntries.length === 0 && csvUploaded && (\n              <div className=\"empty-state\">\n                <div className=\"empty-icon\">📝</div>\n                <p>No changes registered yet</p>\n                <small>Fill in the fields above and click \"Register Changes\" to add entries</small>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div> \n  );\n}\n\n// export { exportedFrameNumbers };\nexport default UploadSection;  ","import React, { useRef, useState, useEffect } from 'react';\r\nimport './VideoPlayer.css';\r\nimport axios from \"axios\";\r\n\r\nfunction VideoPlayer({ csvFile }) {\r\n  const [streamSrc, setStreamSrc] = useState(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const [showIdPopup, setShowIdPopup] = useState(false);\r\n  const [csvUploaded, setCsvUploaded] = useState(false);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n  const [newId, setNewId] = useState(\"\");\r\n  const [currentFrame, setCurrentFrame] = useState(0);\r\n  const [frameData, setFrameData] = useState({\r\n    frames: [],\r\n    trackIds: []\r\n  });\r\n  const [currentTrackId, setCurrentTrackId] = useState(null);\r\n  const [currentFrameIndex, setCurrentFrameIndex] = useState(-1);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const streamRef = useRef(null);\r\n  const frameUpdateInterval = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setCsvUploaded(!!csvFile);\r\n    if (csvFile) {\r\n      fetchFrameNumbers();\r\n    }\r\n  }, [csvFile]);\r\n\r\n  const fetchFrameNumbers = async () => {\r\n    try {\r\n      const response = await axios.get('http://127.0.0.1:5000/get-frame-numbers');\r\n      if (response.data.end_frames && response.data.track_ids) {\r\n        setFrameData({\r\n          frames: response.data.end_frames,\r\n          trackIds: response.data.track_ids\r\n        });\r\n        console.log(\"Fetched frame data:\", response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching frame numbers:\", error);\r\n    }\r\n  };\r\n\r\n  const handleVideoUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file && file.type.startsWith('video/')) {\r\n      const formData = new FormData();\r\n      formData.append('video', file);\r\n\r\n      try {\r\n        const response = await axios.post('http://127.0.0.1:5000/upload-video', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n        if (response.data.success) {\r\n          // Start MJPEG stream instead of setting video source\r\n          startMjpegStream();\r\n          alert('Video uploaded successfully. Starting stream...');\r\n        } else {\r\n          alert('Error uploading video.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Video upload error:', error);\r\n        alert('Error uploading video.');\r\n      }\r\n    } else {\r\n      alert('Please upload a valid video file.');\r\n    }\r\n  };\r\n\r\n  const startMjpegStream = () => {\r\n    const timestamp = Date.now();\r\n    setStreamSrc(`http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}`);\r\n    setIsStreaming(true);\r\n    \r\n    // Start periodic frame updates to track current frame\r\n    startFrameTracking();\r\n  };\r\n\r\n  const startFrameTracking = () => {\r\n    // Clear any existing interval first\r\n    stopFrameTracking();\r\n    \r\n    // Poll backend for current frame information\r\n    frameUpdateInterval.current = setInterval(async () => {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/current-frame');\r\n        if (response.data.current_frame !== undefined && response.data.current_frame !== null) {\r\n          setCurrentFrame(response.data.current_frame);\r\n          updateCurrentFrameIndex(response.data.current_frame);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching current frame:\", error);\r\n        // If we get persistent 400 errors, stop polling temporarily\r\n        if (error.response && error.response.status === 400) {\r\n          console.warn(\"Backend not ready, pausing frame tracking\");\r\n          stopFrameTracking();\r\n          // Retry after 2 seconds\r\n          setTimeout(() => {\r\n            if (isStreaming && !isProcessing) {\r\n              startFrameTracking();\r\n            }\r\n          }, 2000);\r\n        }\r\n      }\r\n    }, 150); // Slightly slower polling to reduce load\r\n  };\r\n\r\n  const stopFrameTracking = () => {\r\n    if (frameUpdateInterval.current) {\r\n      clearInterval(frameUpdateInterval.current);\r\n      frameUpdateInterval.current = null;\r\n    }\r\n  };\r\n  \r\n  const handleEditId = () => {\r\n    setShowIdPopup(true);\r\n    // Pause the stream tracking when editing\r\n    stopFrameTracking();\r\n  };\r\n\r\n  const togglePlayPause = async () => {\r\n    if (isProcessing) return; // Prevent double clicks\r\n    \r\n    setIsProcessing(true);\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:5000/toggle-playback');\r\n      if (response.data.success) {\r\n        setIsStreaming(response.data.is_playing);\r\n        if (response.data.is_playing) {\r\n          startFrameTracking();\r\n        } else {\r\n          stopFrameTracking();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error toggling playback:\", error);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleFrameSeek = async (frame) => {\r\n    if (isProcessing) return; // Prevent multiple simultaneous seeks\r\n    \r\n    setIsProcessing(true);\r\n    try {\r\n      // Stop tracking before seeking\r\n      stopFrameTracking();\r\n      \r\n      const response = await axios.post('http://127.0.0.1:5000/seek-frame', {\r\n        frame: frame\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        setCurrentFrame(frame);\r\n        updateCurrentFrameIndex(frame);\r\n        \r\n        // Wait a moment for backend to process the seek\r\n        await new Promise(resolve => setTimeout(resolve, 200));\r\n        \r\n        // Refresh stream to show new frame\r\n        refreshStream();\r\n        \r\n        // Restart frame tracking after a short delay to ensure backend is ready\r\n        setTimeout(() => {\r\n          if (isStreaming && !isProcessing) {\r\n            startFrameTracking();\r\n          }\r\n        }, 300);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error seeking frame:\", error);\r\n      // Restart tracking even if seek failed\r\n      setTimeout(() => {\r\n        if (isStreaming) {\r\n          startFrameTracking();\r\n        }\r\n      }, 300);\r\n    } finally {\r\n      setTimeout(() => setIsProcessing(false), 500); // Ensure processing state is cleared\r\n    }\r\n  };\r\n\r\n  const refreshStream = () => {\r\n    if (streamRef.current) {\r\n      const timestamp = Date.now();\r\n      const baseUrl = `http://127.0.0.1:5000/mjpeg-stream`;\r\n      streamRef.current.src = `${baseUrl}?t=${timestamp}`;\r\n    }\r\n  };\r\n\r\n  const handleSaveId = async () => {\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:5000/update-id', {\r\n        currentFrame: currentFrame,\r\n        currentId: currentId,\r\n        newId: newId,\r\n      });\r\n  \r\n      if (response.data.success) {\r\n        // Refresh the stream to show updated annotations\r\n        refreshStream();\r\n        alert(\"ID updated successfully and stream refreshed.\");\r\n        \r\n        // Wait a moment then restart frame tracking\r\n        setTimeout(() => {\r\n          startFrameTracking();\r\n        }, 200);\r\n      } else {\r\n        alert(\"Failed to update ID.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating ID:\", error);\r\n      alert(\"Error updating ID.\");\r\n    }\r\n  \r\n    setShowIdPopup(false);\r\n    setCurrentId(\"\");\r\n    setNewId(\"\");\r\n  };\r\n\r\n  const updateCurrentFrameIndex = (frame) => {\r\n    const index = frameData.frames.findIndex(f => f === frame);\r\n    setCurrentFrameIndex(index);\r\n    if (index >= 0) {\r\n      setCurrentTrackId(frameData.trackIds[index]);\r\n    } else {\r\n      setCurrentTrackId(null);\r\n    }\r\n  };\r\n\r\n  const navigateToFrame = (frame) => {\r\n    handleFrameSeek(frame);\r\n  };\r\n\r\n  const navigatePrev = () => {\r\n    if (frameData.frames.length === 0) {\r\n      alert(\"No frame data available. Please upload a CSV file first.\");\r\n      return;\r\n    }\r\n\r\n    if (currentFrameIndex > 0) {\r\n      // Move to previous frame in the array\r\n      navigateToFrame(frameData.frames[currentFrameIndex - 1]);\r\n    } else if (currentFrameIndex === 0) {\r\n      // Already at first frame, optionally wrap to last frame\r\n      navigateToFrame(frameData.frames[frameData.frames.length - 1]);\r\n    } else {\r\n      // currentFrameIndex is -1 (current frame not in array)\r\n      // Find the closest previous frame in the array\r\n      const closestPrevIndex = frameData.frames.findIndex(frame => frame >= currentFrame) - 1;\r\n      if (closestPrevIndex >= 0) {\r\n        navigateToFrame(frameData.frames[closestPrevIndex]);\r\n      } else {\r\n        // No previous frame found, go to last frame in array\r\n        navigateToFrame(frameData.frames[frameData.frames.length - 1]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const navigateNext = () => {\r\n    if (frameData.frames.length === 0) {\r\n      alert(\"No frame data available. Please upload a CSV file first.\");\r\n      return;\r\n    }\r\n\r\n    if (currentFrameIndex >= 0 && currentFrameIndex < frameData.frames.length - 1) {\r\n      // Move to next frame in the array\r\n      navigateToFrame(frameData.frames[currentFrameIndex + 1]);\r\n    } else if (currentFrameIndex === frameData.frames.length - 1) {\r\n      // Already at last frame, optionally wrap to first frame\r\n      navigateToFrame(frameData.frames[0]);\r\n    } else {\r\n      // currentFrameIndex is -1 (current frame not in array)\r\n      // Find the closest next frame in the array\r\n      const closestNextIndex = frameData.frames.findIndex(frame => frame > currentFrame);\r\n      if (closestNextIndex >= 0) {\r\n        navigateToFrame(frameData.frames[closestNextIndex]);\r\n      } else {\r\n        // No next frame found, go to first frame in array\r\n        navigateToFrame(frameData.frames[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      stopFrameTracking();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"video-player\">\r\n      {!streamSrc && (\r\n        <>\r\n          <label htmlFor=\"video-upload\" className=\"upload-btn\">Upload Video</label>\r\n          <input\r\n            id=\"video-upload\"\r\n            type=\"file\"\r\n            accept=\"video/*\"\r\n            style={{ display: 'none' }}\r\n            onChange={handleVideoUpload}\r\n          />\r\n        </>\r\n      )}\r\n\r\n      {streamSrc && (\r\n        <div style={{ position: 'relative', width: '100%' }}>\r\n          <img\r\n            ref={streamRef}\r\n            className=\"stream-element\"\r\n            src={streamSrc}\r\n            alt=\"MJPEG Stream\"\r\n            style={{\r\n              width: '100%',\r\n              height: 'auto',\r\n              maxHeight: '500px',\r\n              border: '1px solid #ccc',\r\n              filter: showIdPopup ? 'brightness(0.8)' : 'none'\r\n            }}\r\n            onError={(e) => {\r\n              console.error(\"Stream error:\", e);\r\n              // Try to refresh the stream on error\r\n              setTimeout(refreshStream, 1000);\r\n            }}\r\n          />\r\n          {showIdPopup && <div className=\"dimming-overlay\" />}\r\n        </div>\r\n      )}\r\n\r\n      {streamSrc && (\r\n        <div className=\"controls\">\r\n          <button onClick={togglePlayPause} disabled={isProcessing}>\r\n            {isProcessing ? 'Processing...' : (isStreaming ? 'Pause Stream' : 'Resume Stream')}\r\n          </button>\r\n          <button onClick={refreshStream} style={{ marginLeft: '10px' }}>\r\n            Refresh Stream\r\n          </button>\r\n          <div className=\"frame-info\">\r\n            <span>Frame: {currentFrame}</span>\r\n            {currentTrackId !== null && (\r\n              <span className=\"track-id\">| Track ID: {currentTrackId}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {streamSrc && (\r\n        <div className=\"frame-navigation\">\r\n          <button onClick={navigatePrev} disabled={isProcessing}>Previous Frame</button>\r\n          <button onClick={navigateNext} disabled={isProcessing}>Next Frame</button>\r\n          \r\n          {/* Frame info display */}\r\n          <div className=\"frame-info\">\r\n            {frameData.frames.length > 0 && (\r\n              <>\r\n                <span>Available frames: {frameData.frames.length} | </span>\r\n                <span>\r\n                  Position: {currentFrameIndex >= 0 ? currentFrameIndex + 1 : 'N/A'} of {frameData.frames.length}\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Jump to specific frame from available frames */}\r\n          <div className=\"frame-jump\">\r\n            <label>Jump to Frame: </label>\r\n            <select \r\n              onChange={(e) => {\r\n                const selectedFrame = parseInt(e.target.value);\r\n                if (!isNaN(selectedFrame)) {\r\n                  navigateToFrame(selectedFrame);\r\n                }\r\n              }}\r\n              value={frameData.frames.includes(currentFrame) ? currentFrame : ''}\r\n              style={{ marginLeft: '5px', padding: '2px' }}\r\n            >\r\n              <option value=\"\">Select frame...</option>\r\n              {frameData.frames.map((frame, index) => (\r\n                <option key={index} value={frame}>\r\n                  Frame {frame} (Track ID: {frameData.trackIds[index]})\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          {/* Manual frame input */}\r\n          <div className=\"frame-input\">\r\n            <label>Or enter frame number: </label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              placeholder=\"Frame number\"\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  const frame = parseInt(e.target.value);\r\n                  if (!isNaN(frame) && frame >= 0) {\r\n                    navigateToFrame(frame);\r\n                    e.target.value = '';\r\n                  }\r\n                }\r\n              }}\r\n              style={{ marginLeft: '5px', width: '100px' }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* <div className=\"save-download\">\r\n        <button\r\n          onClick={() => {\r\n            if (csvUploaded) {\r\n              handleEditId();\r\n            } else {\r\n              alert(\"Please upload a CSV file first to enable editing.\");\r\n            }\r\n          }}\r\n          disabled={!csvUploaded}\r\n        >\r\n          Edit ID\r\n        </button>\r\n      </div> */}\r\n\r\n      {/* {showIdPopup && (\r\n        <div className=\"id-popup\">\r\n          <h3>Update ID</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Current ID\"\r\n            value={currentId}\r\n            onChange={(e) => setCurrentId(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"New ID\"\r\n            value={newId}\r\n            onChange={(e) => setNewId(e.target.value)}\r\n          />\r\n          <button onClick={handleSaveId}>Save ID</button>\r\n          <button onClick={() => { \r\n            setShowIdPopup(false);\r\n            startFrameTracking(); // Resume tracking when closing popup\r\n          }}>Close</button>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoPlayer;","import React from \"react\";\r\nimport \"./DownloadCsvButton.css\";\r\n\r\nconst DownloadCsvButton = () => {\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/download_csv\", {\r\n        method: \"GET\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to download CSV\");\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n\r\n      const a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = \"updated_annotations.csv\";\r\n      document.body.appendChild(a);\r\n      a.click();\r\n\r\n      a.remove();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error(\"Error downloading CSV:\", error);\r\n      alert(\"Failed to download CSV\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleDownload} className=\"download-csv-btn\">\r\n      Download Updated CSV\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DownloadCsvButton;\r\n","import React, { useState } from \"react\";\r\nimport { ChevronDown, ChevronRight, Activity, Target, BarChart3, Info, Search, X, Download } from \"lucide-react\";\r\nimport \"./OutputsPage.css\";\r\nimport DownloadCsvButton from \"./DownloadCsvButton\";\r\n// Mock data structure based on your backend\r\nconst mockAnalyticsData = {\r\n  start_frame: 1,\r\n  end_frame: 150,\r\n  metrics: {\r\n    total_tracks: 12,\r\n    total_frames: 150,\r\n    avg_detections_per_frame: 3.2,\r\n    avg_track_duration: 45.3,\r\n    max_track_duration: 89,\r\n    min_track_duration: 12,\r\n    avg_track_fragmentation: 1.2,\r\n    avg_velocity_consistency: 0.85,\r\n    avg_size_consistency: 0.92,\r\n    avg_confidence_stability: 0.78,\r\n    track_stability_score: 0.85\r\n  },\r\n  tracks_summary: {\r\n    1: { start_frame: 1, end_frame: 89, total_detections: 85, gaps: 2, avg_confidence: 0.92 },\r\n    2: { start_frame: 15, end_frame: 145, total_detections: 120, gaps: 1, avg_confidence: 0.87 },\r\n    3: { start_frame: 25, end_frame: 67, total_detections: 40, gaps: 0, avg_confidence: 0.95 },\r\n    4: { start_frame: 45, end_frame: 150, total_detections: 98, gaps: 3, avg_confidence: 0.83 },\r\n    5: { start_frame: 12, end_frame: 34, total_detections: 22, gaps: 1, avg_confidence: 0.89 }\r\n  }\r\n};\r\n\r\nconst AnalyticsSection = ({ title, icon: Icon, children, defaultOpen = false }) => {\r\n  const [isOpen, setIsOpen] = useState(defaultOpen);\r\n\r\n  return (\r\n    <div className=\"analytics-section-container\">\r\n      <button \r\n        className={`analytics-section-header ${isOpen ? 'open' : ''}`}\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <div className=\"section-title-container\">\r\n          <Icon size={20} className=\"section-icon\" />\r\n          <h3 className=\"section-title\">{title}</h3>\r\n        </div>\r\n        {isOpen ? <ChevronDown size={20} /> : <ChevronRight size={20} />}\r\n      </button>\r\n      \r\n      <div className={`analytics-section-content ${isOpen ? 'open' : ''}`}>\r\n        <div className=\"section-content-inner\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MetricItem = ({ label, value, type = \"default\" }) => {\r\n  const formatValue = (val) => {\r\n    if (typeof val === 'number') {\r\n      if (label.toLowerCase().includes('score') || label.toLowerCase().includes('consistency') || label.toLowerCase().includes('stability')) {\r\n        return (val * 100).toFixed(1) + '%';\r\n      }\r\n      return val % 1 === 0 ? val.toString() : val.toFixed(2);\r\n    }\r\n    return val;\r\n  };\r\n\r\n  const getMetricClass = () => {\r\n    if (type === 'highlight') return 'metric-highlight';\r\n    if (type === 'warning' && typeof value === 'number' && value < 0.5) return 'metric-warning';\r\n    return 'metric-default';\r\n  };\r\n\r\n  return (\r\n    <div className={`metric-item ${getMetricClass()}`}>\r\n      <span className=\"metric-label\">{label.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</span>\r\n      <span className=\"metric-value\">{formatValue(value)}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TrackCard = ({ trackId, summary, trackStatus }) => {\r\n  const duration = summary.end_frame - summary.start_frame + 1;\r\n\r\n  return (\r\n    <div className={`track-card track-${trackStatus}`}>\r\n      <div className=\"track-header\">\r\n        <span className=\"track-id\">Track {trackId}</span>\r\n        <span className={`track-status ${trackStatus}`}>\r\n          {trackStatus.toUpperCase()}\r\n        </span>\r\n      </div>\r\n      <div className=\"track-details\">\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Duration:</span>\r\n          <span className=\"detail-value\">{duration} frames ({summary.start_frame}-{summary.end_frame})</span>\r\n        </div>\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Detections:</span>\r\n          <span className=\"detail-value\">{summary.total_detections}</span>\r\n        </div>\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Gaps:</span>\r\n          <span className=\"detail-value\">{summary.gaps}</span>\r\n        </div>\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Avg Confidence:</span>\r\n          <span className=\"detail-value\">{(summary.avg_confidence * 100).toFixed(1)}%</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AnalyticsDashboard = () => {\r\n  const [analyticsData, setAnalyticsData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [showAnalytics, setShowAnalytics] = useState(true);\r\n  const [trackIdSearch, setTrackIdSearch] = useState(\"\");\r\n  const [frameSearch, setFrameSearch] = useState(\"\");\r\n  const [trackStatusFilter, setTrackStatusFilter] = useState(\"all\");\r\n\r\n  const loadAnalytics = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Replace with your actual API call\r\n      const response = await fetch('http://127.0.0.1:5000/analytics');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to fetch analytics');\r\n      }\r\n\r\n      setAnalyticsData(data);\r\n      setShowAnalytics(true);\r\n    } catch (err) {\r\n      console.error('Error loading analytics:', err);\r\n      setError(err.message);\r\n      // For demo purposes, we'll still show mock data\r\n      setShowAnalytics(true);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTrackStatus = (summary) => {\r\n    if (summary.avg_confidence > 0.9) return 'excellent';\r\n    if (summary.avg_confidence > 0.7) return 'good';\r\n    if (summary.avg_confidence > 0.5) return 'fair';\r\n    return 'poor';\r\n  };\r\n\r\n  const filteredTracks = () => {\r\n    let tracks = Object.entries(analyticsData.tracks_summary);\r\n    \r\n    // Filter by track ID search\r\n    if (trackIdSearch) {\r\n      tracks = tracks.filter(([trackId]) => {\r\n        return trackId.toString().toLowerCase().includes(trackIdSearch.toLowerCase());\r\n      });\r\n    }\r\n    \r\n    // Filter by frame search (check if frame is within track's range)\r\n    if (frameSearch) {\r\n      const searchFrame = parseInt(frameSearch);\r\n      if (!isNaN(searchFrame)) {\r\n        tracks = tracks.filter(([trackId, summary]) => {\r\n          return searchFrame >= summary.start_frame && searchFrame <= summary.end_frame;\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Filter by status\r\n    if (trackStatusFilter !== \"all\") {\r\n      tracks = tracks.filter(([trackId, summary]) => {\r\n        return getTrackStatus(summary) === trackStatusFilter;\r\n      });\r\n    }\r\n    \r\n    return tracks;\r\n  };\r\n\r\n  const getTrackStats = () => {\r\n    const tracks = Object.entries(analyticsData.tracks_summary);\r\n    const stats = {\r\n      all: tracks.length,\r\n      excellent: 0,\r\n      good: 0,\r\n      fair: 0,\r\n      poor: 0\r\n    };\r\n    \r\n    tracks.forEach(([trackId, summary]) => {\r\n      const status = getTrackStatus(summary);\r\n      stats[status]++;\r\n    });\r\n    \r\n    return stats;\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setTrackIdSearch(\"\");\r\n    setFrameSearch(\"\");\r\n    setTrackStatusFilter(\"all\");\r\n  };\r\n\r\n  const hasActiveFilters = () => {\r\n    return trackIdSearch || frameSearch || trackStatusFilter !== \"all\";\r\n  };\r\n\r\n  const getKeyMetrics = () => {\r\n    const { metrics } = analyticsData;\r\n    return {\r\n      'Total Tracks': metrics.total_tracks,\r\n      'Total Frames': metrics.total_frames,\r\n      'Avg Detections/Frame': metrics.avg_detections_per_frame,\r\n      // 'Track Stability Score': metrics.track_stability_score\r\n    };\r\n  };\r\n\r\n  const getPerformanceMetrics = () => {\r\n    const { metrics } = analyticsData;\r\n    return {\r\n      'Avg Track Duration': metrics.avg_track_duration,\r\n      'Max Track Duration': metrics.max_track_duration,\r\n      'Min Track Duration': metrics.min_track_duration,\r\n      'Avg Track Fragmentation': metrics.avg_track_fragmentation,\r\n      // 'Avg Velocity Consistency': metrics.avg_velocity_consistency,\r\n      'Avg Size Consistency': metrics.avg_size_consistency,\r\n      'Avg Confidence Stability': metrics.avg_confidence_stability\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>\r\n      <h1>Analytics Dashboard</h1>\r\n      \r\n      <div className=\"outputs-actions\">\r\n        <button \r\n          className=\"analytics-btn\" \r\n          onClick={loadAnalytics}\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Loading...' : '📊 View Analytics'}\r\n        </button>\r\n        <DownloadCsvButton />\r\n\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"analytics-error\">\r\n          <h3>❌ Error Loading Analytics</h3>\r\n          <p>{error}</p>\r\n          <p>Please check if your CSV file is uploaded and try again.</p>\r\n        </div>\r\n      )}\r\n\r\n      {loading && (\r\n        <div className=\"analytics-loading\">\r\n          <div className=\"spinner\"></div>\r\n          <p>Loading analytics data...</p>\r\n        </div>\r\n      )}\r\n\r\n      {showAnalytics && analyticsData && !loading && (\r\n        <div className=\"analytics-dashboard\">\r\n          <div className=\"analytics-header\">\r\n            <h2>📊 Analytics Dashboard</h2>\r\n            <button \r\n              className=\"close-analytics-btn\"\r\n              onClick={() => setShowAnalytics(false)}\r\n            >\r\n              ✕\r\n            </button>\r\n          </div>\r\n\r\n          {/* Frame Range Info */}\r\n          <div className=\"frame-info\">\r\n            <div className=\"frame-range\">\r\n              Frame {analyticsData.start_frame} - {analyticsData.end_frame}\r\n            </div>\r\n            <div className=\"frame-label\">\r\n              Analysis Range • Total: {analyticsData.end_frame - analyticsData.start_frame + 1} frames\r\n            </div>\r\n          </div>\r\n\r\n          {/* Key Metrics Section */}\r\n          <AnalyticsSection title=\"Key Metrics\" icon={Info} defaultOpen={true}>\r\n            <div className=\"metrics-grid\">\r\n              {Object.entries(getKeyMetrics()).map(([key, value]) => (\r\n                <MetricItem key={key} label={key} value={value} type=\"highlight\" />\r\n              ))}\r\n            </div>\r\n          </AnalyticsSection>\r\n\r\n          {/* Performance Metrics Section */}\r\n          <AnalyticsSection title=\"Performance Metrics\" icon={BarChart3}>\r\n            <div className=\"metrics-grid\">\r\n              {Object.entries(getPerformanceMetrics()).map(([key, value]) => (\r\n                <MetricItem key={key} label={key} value={value} type=\"default\" />\r\n              ))}\r\n            </div>\r\n          </AnalyticsSection>\r\n\r\n          {/* Tracks Summary Section */}\r\n          <AnalyticsSection title=\"Individual Tracks\" icon={Target}>\r\n            <div className=\"tracks-search-container\">\r\n              {/* Search Inputs Row */}\r\n              <div className=\"search-inputs-row\">\r\n                {/* Track ID Search */}\r\n                <div className=\"search-input-container\">\r\n                  <label className=\"search-input-label\">Search by Track ID</label>\r\n                  <Search className=\"search-icon\" size={16} />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"search-input\"\r\n                    placeholder=\"Enter track ID (e.g., 1, 2, 3...)\"\r\n                    value={trackIdSearch}\r\n                    onChange={(e) => setTrackIdSearch(e.target.value)}\r\n                  />\r\n                  {trackIdSearch && (\r\n                    <button className=\"clear-search\" onClick={() => setTrackIdSearch(\"\")}>\r\n                      <X size={14} />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Frame Search */}\r\n                <div className=\"search-input-container\">\r\n                  <label className=\"search-input-label\">Search by Frame Number</label>\r\n                  <Search className=\"search-icon\" size={16} />\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"search-input\"\r\n                    placeholder=\"Enter frame number (e.g., 105)\"\r\n                    value={frameSearch}\r\n                    onChange={(e) => setFrameSearch(e.target.value)}\r\n                    min=\"1\"\r\n                  />\r\n                  {frameSearch && (\r\n                    <button className=\"clear-search\" onClick={() => setFrameSearch(\"\")}>\r\n                      <X size={14} />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Clear All Button */}\r\n                {hasActiveFilters() && (\r\n                  <button className=\"clear-all-searches\" onClick={clearSearch}>\r\n                    Clear All\r\n                  </button>\r\n                )}\r\n              </div>\r\n\r\n              {/* Status Filters */}\r\n              <div className=\"filter-container\">\r\n                <span className=\"filter-label\">Filter by Quality:</span>\r\n                <div className=\"status-filters\">\r\n                  {Object.entries(getTrackStats()).map(([status, count]) => (\r\n                    <button\r\n                      key={status}\r\n                      className={`status-filter-btn ${status} ${trackStatusFilter === status ? 'active' : ''}`}\r\n                      onClick={() => setTrackStatusFilter(status)}\r\n                    >\r\n                      {status} ({count})\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Search Results Info */}\r\n              {hasActiveFilters() && (\r\n                <div className=\"search-results-info\">\r\n                  <span className=\"results-count\">\r\n                    Showing {filteredTracks().length} of {Object.keys(analyticsData.tracks_summary).length} tracks\r\n                    {trackIdSearch && ` • Track ID: \"${trackIdSearch}\"`}\r\n                    {frameSearch && ` • Frame: ${frameSearch}`}\r\n                    {trackStatusFilter !== \"all\" && ` • Quality: ${trackStatusFilter}`}\r\n                  </span>\r\n                  <button className=\"clear-all-btn\" onClick={clearSearch}>\r\n                    Clear Filters\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {filteredTracks().length > 0 ? (\r\n              <div className=\"tracks-grid\">\r\n                {filteredTracks().map(([trackId, summary]) => (\r\n                  <TrackCard \r\n                    key={trackId} \r\n                    trackId={trackId} \r\n                    summary={summary} \r\n                    trackStatus={getTrackStatus(summary)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"no-results\">\r\n                <h3>No tracks found</h3>\r\n                <p>\r\n                  {trackIdSearch && `No tracks found with ID containing \"${trackIdSearch}\"`}\r\n                  {frameSearch && !trackIdSearch && `No tracks found containing frame ${frameSearch}`}\r\n                  {trackIdSearch && frameSearch && ` or containing frame ${frameSearch}`}\r\n                  {!trackIdSearch && !frameSearch && trackStatusFilter !== \"all\" && `No ${trackStatusFilter} quality tracks found`}\r\n                  {!trackIdSearch && !frameSearch && trackStatusFilter === \"all\" && \"Try adjusting your search criteria\"}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </AnalyticsSection>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsDashboard;","// import React, { useState } from 'react';\r\n// import { Menu, X, Sun, Moon, Trash2, Info, RefreshCw } from 'lucide-react';\r\n// import './AccessBar.css';\r\n\r\n// const AccessBar = () => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n//   const [displayMode, setDisplayMode] = useState('all'); // 'all' or 'specific'\r\n//   const [specificIds, setSpecificIds] = useState([]);\r\n//   const [newId, setNewId] = useState('');\r\n//   const [filterInfo, setFilterInfo] = useState(null);\r\n\r\n//   const toggleAccessBar = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const closeAccessBar = () => {\r\n//     setIsOpen(false);\r\n//   };\r\n\r\n//   const handleDisplayModeChange = (mode) => {\r\n//     setDisplayMode(mode);\r\n    \r\n//     // Only trigger endpoint for 'all' mode immediately\r\n//     if (mode === 'all') {\r\n//       triggerEndpoint('/render-all-ids');\r\n//     }\r\n//     // For 'specific' mode, we'll wait for user to click \"Apply Filter\" button\r\n//   };\r\n\r\n//   const addSpecificId = () => {\r\n//     if (newId.trim() && !specificIds.includes(newId.trim())) {\r\n//       const updatedIds = [...specificIds, newId.trim()];\r\n//       setSpecificIds(updatedIds);\r\n//       setNewId('');\r\n//       // Don't trigger endpoint automatically - wait for \"Apply Filter\" button\r\n//     }\r\n//   };\r\n\r\n//   const removeSpecificId = (idToRemove) => {\r\n//     // Remove the ID from the list\r\n//     const updatedIds = specificIds.filter(id => id !== idToRemove);\r\n//     setSpecificIds(updatedIds);\r\n//     // Don't trigger endpoint automatically - wait for \"Apply Filter\" button\r\n//   };\r\n\r\n//   // New function to apply the specific IDs filter\r\n//   const applySpecificIdsFilter = () => {\r\n//     if (displayMode === 'specific') {\r\n//       triggerEndpoint('/render-specific-ids', specificIds);\r\n//     }\r\n//   };\r\n\r\n//   const handleKeyPress = (e) => {\r\n//     if (e.key === 'Enter') {\r\n//       addSpecificId();\r\n//     }\r\n//   };\r\n\r\n//   const triggerEndpoint = async (endpoint, ids = null) => {\r\n//     try {\r\n//       const requestBody = endpoint === '/render-specific-ids' ? { ids } : {};\r\n      \r\n//       // Add base URL if needed\r\n//       const baseUrl = 'http://127.0.0.1:5000'; // Adjust if your Flask server runs on different host/port\r\n//       const fullUrl = `${baseUrl}${endpoint}`;\r\n      \r\n//       console.log(`Calling endpoint: ${fullUrl}`, requestBody);\r\n      \r\n//       const response = await fetch(fullUrl, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(requestBody),\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         console.error(`Failed to call ${endpoint}:`, response.status, errorText);\r\n//       } else {\r\n//         const responseData = await response.json();\r\n//         console.log(`Successfully called ${endpoint}:`, responseData);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(`Error calling ${endpoint}:`, error);\r\n//     }\r\n//   };\r\n\r\n//   // New function to get display filter info\r\n//   const getDisplayFilterInfo = async () => {\r\n//     try {\r\n//       const baseUrl = 'http://127.0.0.1:5000';\r\n//       const response = await fetch(`${baseUrl}/get-display-filter-info`, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         setFilterInfo(data.filter_info);\r\n//         console.log('Filter info:', data.filter_info);\r\n//       } else {\r\n//         const errorText = await response.text();\r\n//         console.error('Failed to get display filter info:', response.status, errorText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error getting display filter info:', error);\r\n//     }\r\n//   };\r\n\r\n//   // New function to clear specific IDs\r\n//   const clearSpecificIds = async () => {\r\n//     try {\r\n//       const baseUrl = 'http://127.0.0.1:5000';\r\n//       const response = await fetch(`${baseUrl}/clear-specific-ids`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (response.ok) {\r\n//         const responseData = await response.json();\r\n//         setSpecificIds([]);\r\n//         setDisplayMode('all');\r\n//         console.log('Successfully cleared specific IDs:', responseData);\r\n//       } else {\r\n//         const errorText = await response.text();\r\n//         console.error('Failed to clear specific IDs:', response.status, errorText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error clearing specific IDs:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {/* Hamburger Menu Button */}\r\n//       <button \r\n//         onClick={toggleAccessBar}\r\n//         className=\"hamburger-btn\"\r\n//         aria-label=\"Open access menu\"\r\n//       >\r\n//         <Menu size={24} />\r\n//       </button>\r\n\r\n//       {/* Overlay */}\r\n//       {isOpen && <div className=\"access-overlay\" onClick={closeAccessBar}></div>}\r\n\r\n//       {/* Access Bar Panel */}\r\n//       <div className={`access-bar ${isOpen ? 'open' : ''}`}>\r\n//         {/* Header with close button */}\r\n//         <div className=\"access-header\">\r\n//           <h2>Menu</h2>\r\n//           <button \r\n//             onClick={closeAccessBar}\r\n//             className=\"close-btn\"\r\n//             aria-label=\"Close access menu\"\r\n//           >\r\n//             <X size={24} />\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Navigation Content */}\r\n//         <div className=\"access-content\">\r\n\r\n//           {/* Display Section */}\r\n//           <div className=\"nav-section\">\r\n//             <h3>Display</h3>\r\n//             <div className=\"nav-items\">\r\n//               {/* Radio buttons for display mode */}\r\n//               <div className=\"radio-group\">\r\n//                 <label className=\"radio-option\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name=\"displayMode\"\r\n//                     value=\"all\"\r\n//                     checked={displayMode === 'all'}\r\n//                     onChange={() => handleDisplayModeChange('all')}\r\n//                   />\r\n//                   <span>All IDs</span>\r\n//                 </label>\r\n                \r\n//                 <label className=\"radio-option\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name=\"displayMode\"\r\n//                     value=\"specific\"\r\n//                     checked={displayMode === 'specific'}\r\n//                     onChange={() => handleDisplayModeChange('specific')}\r\n//                   />\r\n//                   <span>Specific IDs</span>\r\n//                 </label>\r\n//               </div>\r\n\r\n//               {/* Specific IDs input section */}\r\n//               {displayMode === 'specific' && (\r\n//                 <div className=\"specific-ids-section\">\r\n//                   <div className=\"id-input-container\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={newId}\r\n//                       onChange={(e) => setNewId(e.target.value)}\r\n//                       onKeyPress={handleKeyPress}\r\n//                       placeholder=\"Enter ID\"\r\n//                       className=\"id-input\"\r\n//                     />\r\n//                     <button\r\n//                       onClick={addSpecificId}\r\n//                       className=\"add-id-btn\"\r\n//                       disabled={!newId.trim() || specificIds.includes(newId.trim())}\r\n//                     >\r\n//                       Add\r\n//                     </button>\r\n//                   </div>\r\n\r\n//                   {/* Display list of specific IDs */}\r\n//                   {specificIds.length > 0 && (\r\n//                     <div className=\"ids-list\">\r\n//                       {specificIds.map((id, index) => (\r\n//                         <div key={index} className=\"id-item\">\r\n//                           <span className=\"id-text\">{id}</span>\r\n//                           <button\r\n//                             onClick={() => removeSpecificId(id)}\r\n//                             className=\"remove-id-btn\"\r\n//                             aria-label={`Remove ID ${id}`}\r\n//                           >\r\n//                             <Trash2 size={16} />\r\n//                           </button>\r\n//                         </div>\r\n//                       ))}\r\n                      \r\n//                       {/* Apply Filter Button */}\r\n//                       <div className=\"apply-filter-container\">\r\n//                         <button \r\n//                           onClick={applySpecificIdsFilter}\r\n//                           className=\"apply-filter-btn\"\r\n//                         >\r\n//                           Apply Filter ({specificIds.length} IDs)\r\n//                         </button>\r\n//                       </div>\r\n//                     </div>\r\n//                   )}\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default AccessBar;\r\n\r\nimport React, { useState } from 'react';\r\nimport { Menu, X, Sun, Moon, Trash2, Info, RefreshCw } from 'lucide-react';\r\nimport './AccessBar.css';\r\n\r\nconst AccessBar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [displayMode, setDisplayMode] = useState('all'); // 'all' or 'specific'\r\n  const [includeIds, setIncludeIds] = useState([]);\r\n  const [excludeIds, setExcludeIds] = useState([]);\r\n  const [newId, setNewId] = useState('');\r\n  const [filterInfo, setFilterInfo] = useState(null);\r\n\r\n  const toggleAccessBar = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const closeAccessBar = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleDisplayModeChange = (mode) => {\r\n    setDisplayMode(mode);\r\n    \r\n    // Only trigger endpoint for 'all' mode immediately\r\n    if (mode === 'all') {\r\n      triggerEndpoint('/render-all-ids');\r\n    }\r\n    // For 'specific' mode, we'll wait for user to click \"Apply Filter\" button\r\n  };\r\n\r\n  const addToIncludeIds = () => {\r\n    if (newId.trim() && !includeIds.includes(newId.trim()) && !excludeIds.includes(newId.trim())) {\r\n      const updatedIds = [...includeIds, newId.trim()];\r\n      setIncludeIds(updatedIds);\r\n      setNewId('');\r\n    }\r\n  };\r\n\r\n  const addToExcludeIds = () => {\r\n    if (newId.trim() && !excludeIds.includes(newId.trim()) && !includeIds.includes(newId.trim())) {\r\n      const updatedIds = [...excludeIds, newId.trim()];\r\n      setExcludeIds(updatedIds);\r\n      setNewId('');\r\n    }\r\n  };\r\n\r\n  const removeFromIncludeIds = (idToRemove) => {\r\n    const updatedIds = includeIds.filter(id => id !== idToRemove);\r\n    setIncludeIds(updatedIds);\r\n  };\r\n\r\n  const removeFromExcludeIds = (idToRemove) => {\r\n    const updatedIds = excludeIds.filter(id => id !== idToRemove);\r\n    setExcludeIds(updatedIds);\r\n  };\r\n\r\n  // Check if ID already exists in either list\r\n  const isIdDuplicate = () => {\r\n    return newId.trim() && (includeIds.includes(newId.trim()) || excludeIds.includes(newId.trim()));\r\n  };\r\n\r\n  // Function to apply the specific IDs filter\r\n  const applySpecificIdsFilter = () => {\r\n    if (displayMode === 'specific') {\r\n      // Handle different scenarios\r\n      if (includeIds.length > 0 && excludeIds.length === 0) {\r\n        // Only include mode\r\n        console.log('Including only IDs:', includeIds);\r\n        triggerEndpoint('/render-specific-ids', includeIds, 'include');\r\n      } else if (excludeIds.length > 0 && includeIds.length === 0) {\r\n        // Only exclude mode\r\n        console.log('Excluding IDs:', excludeIds);\r\n        triggerEndpoint('/render-specific-ids', excludeIds, 'exclude');\r\n      } else if (includeIds.length > 0 && excludeIds.length > 0) {\r\n        // Both include and exclude - prioritize include\r\n        console.warn('Both include and exclude IDs specified - prioritizing include mode');\r\n        triggerEndpoint('/render-specific-ids', includeIds, 'include');\r\n      } else {\r\n        console.warn('No IDs specified for filtering');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      // Default to Include when Enter is pressed, if ID is valid and not duplicate\r\n      if (!isIdDuplicate() && newId.trim()) {\r\n        addToIncludeIds();\r\n      }\r\n    }\r\n  };\r\n\r\n  const triggerEndpoint = async (endpoint, ids = null, mode = null) => {\r\n    try {\r\n      let requestBody = {};\r\n      \r\n      if (endpoint === '/render-specific-ids') {\r\n        requestBody = { ids };\r\n        if (mode) {\r\n          requestBody.mode = mode;\r\n        }\r\n      }\r\n      \r\n      // Add base URL if needed\r\n      const baseUrl = 'http://127.0.0.1:5000'; // Adjust if your Flask server runs on different host/port\r\n      const fullUrl = `${baseUrl}${endpoint}`;\r\n      \r\n      console.log(`Calling endpoint: ${fullUrl}`, requestBody);\r\n      \r\n      const response = await fetch(fullUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`Failed to call ${endpoint}:`, response.status, errorText);\r\n      } else {\r\n        const responseData = await response.json();\r\n        console.log(`Successfully called ${endpoint}:`, responseData);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error calling ${endpoint}:`, error);\r\n    }\r\n  };\r\n\r\n  // Function to get display filter info\r\n  const getDisplayFilterInfo = async () => {\r\n    try {\r\n      const baseUrl = 'http://127.0.0.1:5000';\r\n      const response = await fetch(`${baseUrl}/get-display-filter-info`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setFilterInfo(data.filter_info);\r\n        console.log('Filter info:', data.filter_info);\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error('Failed to get display filter info:', response.status, errorText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting display filter info:', error);\r\n    }\r\n  };\r\n\r\n  // Function to clear all specific IDs\r\n  const clearAllSpecificIds = async () => {\r\n    try {\r\n      const baseUrl = 'http://127.0.0.1:5000';\r\n      const response = await fetch(`${baseUrl}/clear-specific-ids`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        // Clear frontend state immediately after successful backend call\r\n        setIncludeIds([]);\r\n        setExcludeIds([]);\r\n        setDisplayMode('all');\r\n        console.log('Successfully cleared specific IDs:', responseData);\r\n        \r\n        // The backend already handles switching to 'all' mode, so no need to call render-all-ids again\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error('Failed to clear specific IDs:', response.status, errorText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing specific IDs:', error);\r\n    }\r\n  };\r\n\r\n  const totalIds = includeIds.length + excludeIds.length;\r\n\r\n  return (\r\n    <>\r\n      {/* Hamburger Menu Button */}\r\n      <button \r\n        onClick={toggleAccessBar}\r\n        className=\"hamburger-btn\"\r\n        aria-label=\"Open access menu\"\r\n      >\r\n        <Menu size={24} />\r\n      </button>\r\n\r\n      {/* Overlay */}\r\n      {isOpen && <div className=\"access-overlay\" onClick={closeAccessBar}></div>}\r\n\r\n      {/* Access Bar Panel */}\r\n      <div className={`access-bar ${isOpen ? 'open' : ''}`}>\r\n        {/* Header with close button */}\r\n        <div className=\"access-header\">\r\n          <h2>Menu</h2>\r\n          <button \r\n            onClick={closeAccessBar}\r\n            className=\"close-btn\"\r\n            aria-label=\"Close access menu\"\r\n          >\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Navigation Content */}\r\n        <div className=\"access-content\">\r\n\r\n          {/* Display Section */}\r\n          <div className=\"nav-section\">\r\n            <h3>Display</h3>\r\n            <div className=\"nav-items\">\r\n              {/* Radio buttons for display mode */}\r\n              <div className=\"radio-group\">\r\n                <label className=\"radio-option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"displayMode\"\r\n                    value=\"all\"\r\n                    checked={displayMode === 'all'}\r\n                    onChange={() => handleDisplayModeChange('all')}\r\n                  />\r\n                  <span>All IDs</span>\r\n                </label>\r\n                \r\n                <label className=\"radio-option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"displayMode\"\r\n                    value=\"specific\"\r\n                    checked={displayMode === 'specific'}\r\n                    onChange={() => handleDisplayModeChange('specific')}\r\n                  />\r\n                  <span>Specific IDs</span>\r\n                </label>\r\n              </div>\r\n\r\n              {/* Specific IDs input section */}\r\n              {displayMode === 'specific' && (\r\n                <div className=\"specific-ids-section\">\r\n                  <div className=\"id-input-container\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={newId}\r\n                      onChange={(e) => setNewId(e.target.value)}\r\n                      onKeyPress={handleKeyPress}\r\n                      placeholder=\"Enter ID\"\r\n                      className=\"id-input\"\r\n                    />\r\n                    <div className=\"action-buttons\">\r\n                      <button\r\n                        onClick={addToIncludeIds}\r\n                        className=\"include-id-btn\"\r\n                        disabled={!newId.trim() || isIdDuplicate()}\r\n                      >\r\n                        Include\r\n                      </button>\r\n                      <button\r\n                        onClick={addToExcludeIds}\r\n                        className=\"exclude-id-btn\"\r\n                        disabled={!newId.trim() || isIdDuplicate()}\r\n                      >\r\n                        Exclude\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Display duplicate warning */}\r\n                  {isIdDuplicate() && (\r\n                    <div className=\"duplicate-warning\">\r\n                      ID already exists in one of the lists\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Display list of include IDs */}\r\n                  {includeIds.length > 0 && (\r\n                    <div className=\"ids-list\">\r\n                      <h4 className=\"list-title include-title\">Include IDs (Show Only These)</h4>\r\n                      {includeIds.map((id, index) => (\r\n                        <div key={index} className=\"id-item include-id\">\r\n                          <span className=\"id-text\">{id}</span>\r\n                          <button\r\n                            onClick={() => removeFromIncludeIds(id)}\r\n                            className=\"delete-id-btn\"\r\n                            aria-label={`Delete ID ${id}`}\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Display list of exclude IDs */}\r\n                  {excludeIds.length > 0 && (\r\n                    <div className=\"ids-list\">\r\n                      <h4 className=\"list-title exclude-title\">Exclude IDs (Hide These)</h4>\r\n                      {excludeIds.map((id, index) => (\r\n                        <div key={index} className=\"id-item exclude-id\">\r\n                          <span className=\"id-text\">{id}</span>\r\n                          <button\r\n                            onClick={() => removeFromExcludeIds(id)}\r\n                            className=\"delete-id-btn\"\r\n                            aria-label={`Delete ID ${id}`}\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Action buttons */}\r\n                  {totalIds > 0 && (\r\n                    <div className=\"filter-actions\">\r\n                      <button \r\n                        onClick={applySpecificIdsFilter}\r\n                        className=\"apply-filter-btn\"\r\n                      >\r\n                        Apply Filter ({totalIds} IDs)\r\n                      </button>\r\n                      \r\n                      <button \r\n                        onClick={clearAllSpecificIds}\r\n                        className=\"clear-all-btn\"\r\n                      >\r\n                        <RefreshCw size={16} />\r\n                        Clear All\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccessBar;","// import React, { useState } from 'react';\r\n// import { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\r\n// import LandingPage from './components/LandingPage';\r\n// import UploadSection from './components/UploadSection';\r\n// import VideoPlayer from './components/VideoPlayer';\r\n// import DownloadCsvButton from './components/DownloadCsvButton';\r\n// import OutputsPage from './components/OutputsPage';\r\n// import './App.css';\r\n\r\n// function MainApp() {\r\n//   const [csvFile, setCsvFile] = useState(null);\r\n//   const [end_frames, setEndFrames] = useState([]);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleCsvUploadSuccess = (file, end_frames) => {\r\n//     setCsvFile(file);\r\n//     setEndFrames(end_frames);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"sidebar\">\r\n//         <UploadSection csvFile={csvFile} onCsvUpload={handleCsvUploadSuccess} />\r\n//       </div>\r\n//       <div className=\"main\">\r\n//         <VideoPlayer csvFile={csvFile} />\r\n//       </div>\r\n//       <div className=\"actions\">\r\n//         {/* Render only if CSV is uploaded */}\r\n//         {csvFile && (\r\n//           <button \r\n//             onClick={() => navigate('/outputs')} \r\n//             className=\"go-to-outputs-btn\"\r\n//           >\r\n//             Go to Outputs\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function App() {\r\n//   return (\r\n//     <BrowserRouter>\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<LandingPage />} />\r\n//         <Route path=\"/app\" element={<MainApp />} />\r\n//         <Route path=\"/outputs\" element={<OutputsPage />} />\r\n//       </Routes>\r\n//     </BrowserRouter>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\r\nimport LandingPage from './components/LandingPage';\r\nimport UploadSection from './components/UploadSection';\r\nimport VideoPlayer from './components/VideoPlayer';\r\nimport OutputsPage from './components/OutputsPage';\r\nimport AccessBar from './components/AccessBar';\r\nimport './App.css';\r\nimport { Sun, Moon } from \"lucide-react\";\r\n\r\n\r\nfunction MainApp() {\r\n  const [csvFile, setCsvFile] = useState(null);\r\n  const [end_frames, setEndFrames] = useState([]);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleCsvUploadSuccess = (file, end_frames) => {\r\n    setCsvFile(file);\r\n    setEndFrames(end_frames);\r\n  };\r\n\r\n  return (\r\n    <div className={`app ${darkMode ? \"dark-mode\" : \"light-mode\"}`}>\r\n      {/* Sidebar */}\r\n      <div className=\"sidebar\">\r\n        <UploadSection csvFile={csvFile} onCsvUpload={handleCsvUploadSuccess} />\r\n        <AccessBar />\r\n        <button \r\n          onClick={() => setDarkMode(!darkMode)} \r\n          className=\"toggle-theme-btn\"\r\n        >\r\n          {darkMode ? <Sun size={20} /> : <Moon size={20} />}\r\n        </button>\r\n      </div>\r\n\r\n      {/* <div className=\"access-bar-container\">\r\n        <AccessBar />\r\n      </div> */}\r\n\r\n      {/* Main Video Player */}\r\n      <div className=\"main\">\r\n        <VideoPlayer csvFile={csvFile} />\r\n      </div>\r\n\r\n      {/* Action Button */}\r\n      <div className=\"actions\">\r\n        {csvFile && (\r\n          <button \r\n            onClick={() => navigate('/outputs')} \r\n            className=\"go-to-outputs-btn\"\r\n          >\r\n            Go to Outputs\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    // <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<LandingPage />} />\r\n        <Route path=\"/app\" element={<MainApp />} />\r\n        <Route path=\"/outputs\" element={<OutputsPage />} />\r\n      </Routes>\r\n    // </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\r\n// import LandingPage from './components/LandingPage';\r\n// import UploadSection from './components/UploadSection';\r\n// import VideoPlayer from './components/VideoPlayer';\r\n// import OutputsPage from './components/OutputsPage';\r\n// import AccessBar from './components/AccessBar';\r\n// import './App.css';\r\n\r\n// function MainApp() {\r\n//   const [csvFile, setCsvFile] = useState(null);\r\n//   const [end_frames, setEndFrames] = useState([]);\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleCsvUploadSuccess = (file, end_frames) => {\r\n//     setCsvFile(file);\r\n//     setEndFrames(end_frames);\r\n//   };\r\n\r\n//   // Apply theme to document root\r\n//   useEffect(() => {\r\n//     if (darkMode) {\r\n//       document.documentElement.setAttribute('data-theme', 'dark');\r\n//     } else {\r\n//       document.documentElement.removeAttribute('data-theme');\r\n//     }\r\n//   }, [darkMode]);\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       {/* Access Bar Component */}\r\n//       <AccessBar darkMode={darkMode} setDarkMode={setDarkMode} />\r\n\r\n//       {/* Sidebar */}\r\n//       <div className=\"sidebar\">\r\n//         <UploadSection onCsvUploadSuccess={handleCsvUploadSuccess} />\r\n//       </div>\r\n\r\n//       {/* Main Video Player */}\r\n//       <div className=\"main-content\">\r\n//         <VideoPlayer csvFile={csvFile} end_frames={end_frames} />\r\n//       </div>\r\n\r\n//       {/* Action Button */}\r\n//       <div className=\"action-section\">\r\n//         {csvFile && (\r\n//           <button\r\n//             onClick={() => navigate('/outputs')}\r\n//             className=\"go-to-outputs-btn\"\r\n//           >\r\n//             Go to Outputs\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function App() {\r\n//   return (\r\n//     <BrowserRouter>\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<LandingPage />} />\r\n//         <Route path=\"/main\" element={<MainApp />} />\r\n//         <Route path=\"/outputs\" element={<OutputsPage />} />\r\n//       </Routes>\r\n//     </BrowserRouter>\r\n//   );\r\n// }\r\n\r\n// export default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}