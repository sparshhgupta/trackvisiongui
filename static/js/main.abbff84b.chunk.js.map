{"version":3,"sources":["components/LandingPage.js","components/UploadSection.js","components/VideoPlayer.js","components/DownloadCsvButton.js","components/OutputsPage.js","components/AccessBar.js","components/InstallationPage.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","navigate","useNavigate","React","createElement","className","onClick","exportedFrameNumbers","UploadSection","_ref","csvFile","onCsvUpload","csvUploaded","setCsvUploaded","useState","logEntries","setLogEntries","frameNumber","setFrameNumber","newClassId","setNewClassId","A","setA","B","setB","streamActive","setStreamActive","notification","setNotification","message","type","show","showNotification","arguments","length","undefined","duration","setTimeout","prev","useEffect","style","position","top","right","padding","borderRadius","color","fontSize","fontWeight","zIndex","maxWidth","boxShadow","animation","backgroundColor","display","alignItems","justifyContent","flex","background","border","cursor","marginLeft","lineHeight","placeholder","value","onChange","e","target","handleLogChanges","trim","async","response","fetch","method","headers","body","JSON","stringify","logs","data","json","ok","success","mjpegImage","document","querySelector","baseUrl","timestamp","Date","now","src","error","console","includes","name","Fragment","href","rel","textDecoration","map","entry","index","key","indexToRemove","filter","_","removeEntry","title","htmlFor","id","accept","file","event","files","formData","FormData","append","axios","post","status","Error","_response$data","get","end_frames","fetchFrameNumbers","startMjpegStream","mjpegContainer","innerHTML","errorMessage","_error$response$data","statusText","code","jsx","VideoPlayer","streamSrc","setStreamSrc","isStreaming","setIsStreaming","showIdPopup","setShowIdPopup","currentId","setCurrentId","newId","setNewId","currentFrame","setCurrentFrame","frameData","setFrameData","frames","trackIds","currentTrackId","setCurrentTrackId","currentFrameIndex","setCurrentFrameIndex","isProcessing","setIsProcessing","streamRef","useRef","frameUpdateInterval","track_ids","log","startFrameTracking","stopFrameTracking","current","setInterval","current_frame","updateCurrentFrameIndex","warn","clearInterval","refreshStream","frame","findIndex","f","navigateToFrame","Promise","resolve","handleFrameSeek","startsWith","width","ref","alt","height","maxHeight","onError","is_playing","disabled","navigatePrev","closestPrevIndex","navigateNext","closestNextIndex","selectedFrame","parseInt","isNaN","min","onKeyPress","DownloadCsvButton","blob","url","window","URL","createObjectURL","a","download","appendChild","click","remove","revokeObjectURL","alert","AnalyticsSection","icon","Icon","children","defaultOpen","isOpen","setIsOpen","size","ChevronDown","ChevronRight","MetricItem","_ref2","label","replace","l","toUpperCase","val","toLowerCase","toFixed","toString","TrackCard","_ref3","trackId","summary","trackStatus","end_frame","start_frame","total_detections","gaps","avg_confidence","AnalyticsDashboard","analyticsData","setAnalyticsData","loading","setLoading","setError","showAnalytics","setShowAnalytics","trackIdSearch","setTrackIdSearch","frameSearch","setFrameSearch","trackStatusFilter","setTrackStatusFilter","getTrackStatus","filteredTracks","tracks","Object","entries","tracks_summary","_ref4","searchFrame","_ref5","_ref6","clearSearch","hasActiveFilters","margin","err","Info","getKeyMetrics","metrics","total_tracks","total_frames","avg_detections_per_frame","_ref8","BarChart3","getPerformanceMetrics","avg_track_duration","max_track_duration","min_track_duration","avg_track_fragmentation","avg_size_consistency","avg_confidence_stability","_ref9","Target","Search","X","getTrackStats","stats","all","excellent","good","fair","poor","forEach","_ref7","_ref10","count","keys","_ref11","AccessBar","displayMode","setDisplayMode","includeIds","setIncludeIds","excludeIds","setExcludeIds","filterInfo","setFilterInfo","closeAccessBar","handleDisplayModeChange","mode","triggerEndpoint","addToIncludeIds","updatedIds","isIdDuplicate","endpoint","ids","requestBody","fullUrl","responseData","errorText","text","totalIds","toggleAccessBar","aria-label","Menu","checked","addToExcludeIds","idToRemove","removeFromIncludeIds","Trash2","removeFromExcludeIds","applySpecificIdsFilter","RefreshCw","InstallationPage","os","version","filename","item","handleDownload","link","removeChild","MainApp","setCsvFile","setEndFrames","darkMode","setDarkMode","handleCsvUploadSuccess","Sun","Moon","App","Routes","Route","path","element","OutputsPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","HashRouter"],"mappings":"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","file":"static/js/main.abbff84b.chunk.js","sourcesContent":["// src/components/LandingPage.js\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LandingPage.css';\r\n\r\nfunction LandingPage() {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"landing-container\">\r\n      <header className=\"landing-header\">\r\n        <h1>TrackVision</h1>\r\n        <p className=\"tagline\">The Smart Solution for Efficient Object Tracking Annotation</p>\r\n        <p className=\"subtagline\">Reduce manual review time with our workflow</p>\r\n      </header>\r\n\r\n      <section className=\"value-proposition\">\r\n        <div className=\"value-card\">\r\n          <h2>Stop Wasting Time Scanning Entire Videos</h2>\r\n          <p>Our system automatically detects potential ID switch frames from your tracking CSV, taking you straight to the critical moments that need verification.</p>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"features-section\">\r\n        <h2>Why Analysts Love TrackVision</h2>\r\n        <div className=\"features-grid\">\r\n          <div className=\"feature-card highlight-card\">\r\n            <h3>⏱️ Smart Frame Navigation</h3>\r\n            <p>Automatically jump to frames near potential ID switches - no more scrubbing through hours of footage.</p>\r\n          </div>\r\n          <div className=\"feature-card highlight-card\">\r\n            <h3>📊 Batch Processing</h3>\r\n            <p>Log multiple entries and process them in batches to minimize waiting time between operations.</p>\r\n          </div>\r\n          {/* <div className=\"feature-card highlight-card\">\r\n            <h3>📝 Intelligent Log Table</h3>\r\n            <p>Our persistent logging system remembers your work so you don't have to re-enter data for every session.</p>\r\n          </div> */}\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"how-it-works\">\r\n        <h2>How To Use the Tool</h2>\r\n        <div className=\"workflow-steps\">\r\n          <div className=\"step\">\r\n            <div className=\"step-number\">1</div>\r\n            <div className=\"step-content\">\r\n              <h3>Upload & Auto-Analyze</h3>\r\n              <p>Simply upload your video and tracking CSV. Our system extracts all track details and flags potential ID switches automatically.</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"step\">\r\n            <div className=\"step-number\">2</div>\r\n            <div className=\"step-content\">\r\n              <h3>Smart Navigation</h3>\r\n              <p>The tool takes you directly to frames where ID switches likely occurred, bypassing irrelevant footage.</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"step\">\r\n            <div className=\"step-number\">3</div>\r\n            <div className=\"step-content\">\r\n              <h3>Batch Correction</h3>\r\n              <p>Make all your annotations in our log table, then apply them in a single batch operation.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* <section className=\"testimonial\">\r\n        <blockquote>\r\n          \"TrackVision cut our video review time from 8 hours to just 90 minutes per project. The batch processing feature alone saves us 20+ hours each week.\"\r\n        </blockquote>\r\n        <p className=\"attribution\">- Senior Video Analyst, Autonomous Vehicle Company</p>\r\n      </section> */}\r\n\r\n      <div className=\"cta-section\">\r\n        <div className=\"cta-buttons\">\r\n          <button \r\n            onClick={() => navigate('/app')}\r\n            className=\"start-button primary\"\r\n          >\r\n            Start Saving Time Now\r\n          </button>\r\n          <button \r\n            onClick={() => navigate('/installation')}\r\n            className=\"start-button secondary\"\r\n          >\r\n            Download Desktop App\r\n          </button>\r\n        </div>\r\n        {/* <p className=\"demo-text\">No installation required. Works directly in your browser.</p> */}\r\n        <p className=\"secondary-cta\">Try with our sample data to see the magic</p>\r\n      </div>\r\n\r\n      {/* <footer className=\"landing-footer\">\r\n        <div className=\"footer-content\">\r\n          <p>Trusted by video analysts at leading research institutions and tech companies</p>\r\n          <p>Questions? <a href=\"mailto:support@trackvision.com\">support@trackvision.com</a></p>\r\n        </div>\r\n      </footer> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;","// import React, { useState, useEffect } from \"react\";\n// import axios from 'axios';\n// import \"./UploadSection.css\";\n\n\n// // frame_numbers = [30, 40, 50];\n// let exportedFrameNumbers = [];\n\n// function UploadSection({ csvFile, onCsvUpload }) {\n//   const [csvUploaded, setCsvUploaded] = useState(false);\n//   const [logEntries, setLogEntries] = useState([]);\n//   const [frameNumber, setFrameNumber] = useState(\"\");\n//   const [newClassId, setNewClassId] = useState(\"\");\n//   const [A, setA] = useState(\"\");\n//   const [B, setB] = useState(\"\");\n//   const [streamActive, setStreamActive] = useState(false);\n\n//   useEffect(() => {\n//     setCsvUploaded(!!csvFile);\n//   }, [csvFile]);\n\n//   const fetchFrameNumbers = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:5000/get-frame-numbers');\n//       if (response.data?.end_frames) {\n//         exportedFrameNumbers = response.data.end_frames; // Update exported variable\n//         alert(`Received frames: ${exportedFrameNumbers.join(', ')}`);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching frames:', error);\n//     }\n//   };\n\n//   const startMjpegStream = () => {\n//     const mjpegContainer = document.querySelector('#mjpeg-container');\n//     if (mjpegContainer) {\n//       const timestamp = Date.now();\n//       mjpegContainer.innerHTML = `\n//         <img \n//           src=\"http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}\" \n//           alt=\"MJPEG Stream\" \n//           data-mjpeg-stream=\"true\"\n//           style=\"max-width: 100%; height: auto; border: 1px solid #ccc;\"\n//           onload=\"this.style.opacity = '1'\"\n//           onerror=\"console.error('MJPEG stream error')\"\n//         />\n//       `;\n//       setStreamActive(true);\n//     }\n//   };\n\n//   const handleCsvUpload = async (event) => {\n//     const file = event.target.files[0];\n//     if (!file) return;\n\n//     if (file.type !== 'text/csv') {\n//       alert('Please upload a valid CSV file.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('csv', file);\n\n//     try {\n//       // Send CSV to backend for processing\n//       const response = await axios.post('http://127.0.0.1:5000/upload-csv', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n\n//       if (response.status === 200) {\n//         alert('CSV file processed successfully. Starting MJPEG stream...');\n        \n//         // Fetch frame numbers after successful upload\n//         await fetchFrameNumbers();\n        \n//         // Start the MJPEG stream\n//         startMjpegStream();\n        \n//         onCsvUpload(file, exportedFrameNumbers);\n//         setCsvUploaded(true);\n//       } else {\n//         throw new Error('Server returned non-200 status');\n//       }\n//     } catch (error) {\n//       console.error('CSV upload error:', error);\n      \n//       let errorMessage = 'Error uploading CSV file';\n//       if (error.response) {\n//         errorMessage = error.response.data?.message || error.response.statusText || errorMessage;\n//       } else {\n//         errorMessage = error.message || errorMessage;\n//       }\n      \n//       alert(errorMessage);\n//     }\n//   };\n\n//   const handleLogChanges = () => {\n//     if (!A.trim()) {\n//       alert(\"Please enter the track id requiring modification before logging.\");\n//       return;\n//     }\n    \n//     setLogEntries([...logEntries, { newClassId, A, B }]);\n//     // setFrameNumber(\"\");\n//     setNewClassId(\"\");\n//     setA(\"\");\n//     setB(\"\");\n//   };\n\n//   const handleClearTable = async () => {\n//     if (logEntries.length === 0) {\n//       alert(\"No data to send.\");\n//       return;\n//     }\n    \n//     try {\n//       const response = await fetch(\"http://localhost:5000/save-logs\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ logs: logEntries }),\n//       });\n      \n//       const data = await response.json();\n      \n//       if (response.ok && data.success) {\n//         // For MJPEG stream, we just need to refresh the image source\n//         // The backend will automatically serve the updated frames\n//         const mjpegImage = document.querySelector('img[data-mjpeg-stream]');\n//         if (mjpegImage) {\n//           // Force refresh by adding timestamp to prevent caching\n//           const baseUrl = `http://127.0.0.1:5000/mjpeg-stream`;\n//           const timestamp = Date.now();\n//           mjpegImage.src = `${baseUrl}?t=${timestamp}`;\n//         }\n//         alert(\"Logs successfully saved to backend. Stream will update automatically.\");\n//         setLogEntries([]);\n//       } else {\n//         alert(data.message || \"Failed to update ID and reprocess video.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating ID:\", error);\n//       alert(error.message || \"Error updating ID.\");\n//     }\n//   };\n\n//   const refreshStream = () => {\n//     const mjpegImage = document.querySelector('img[data-mjpeg-stream]');\n//     if (mjpegImage) {\n//       const timestamp = Date.now();\n//       mjpegImage.src = `http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}`;\n//     }\n//   };\n\n//   const removeEntry = (indexToRemove) => {\n//     setLogEntries(logEntries.filter((_, index) => index !== indexToRemove));\n//   };\n\n//   return (\n//     <div className=\"upload-section\">\n//       {!csvUploaded ? (\n//         <>\n//           <label htmlFor=\"csv-upload\" className=\"upload-btn\">Upload CSV</label>\n//           <input\n//             id=\"csv-upload\"\n//             type=\"file\"\n//             accept=\".csv\"\n//             style={{ display: \"none\" }}\n//             onChange={handleCsvUpload}\n//           />\n//         </>\n//       ) : (\n//         <div className=\"stream-section\">\n//           {/* MJPEG Stream Container */}\n//           {/* <div className=\"stream-container\">\n//             <h3>Live Stream</h3>\n//             <div id=\"mjpeg-container\" style={{ textAlign: 'center', marginBottom: '20px' }}>\n//               {streamActive ? null : <p>Loading stream...</p>}\n//             </div>\n//             <button onClick={refreshStream} style={{ marginBottom: '20px' }}>\n//               Refresh Stream\n//             </button>\n//           </div> */}\n\n//           {/* Log Section */}\n//           <div className=\"log-section\">\n//             <h3 className=\"log-title\">Change Log</h3>\n//             <div className=\"input-container\">\n//               <div className=\"input-group\">\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"A\"\n//                   value={A}\n//                   onChange={(e) => setA(e.target.value)}\n//                   className=\"styled-input\"\n//                 />\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"B\"\n//                   value={B}\n//                   onChange={(e) => setB(e.target.value)}\n//                   className=\"styled-input\"\n//                 />\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"New Class ID\"\n//                   value={newClassId}\n//                   onChange={(e) => setNewClassId(e.target.value)}\n//                   className=\"styled-input\"\n//                 />\n//               </div>\n//               <div className=\"button-group\">\n//                 <button onClick={handleLogChanges} className=\"btn-primary\">\n//                   Register Changes\n//                 </button>\n//                 <button onClick={handleClearTable} className=\"btn-secondary\">\n//                   Make Changes\n//                 </button>\n//               </div>\n//             </div>\n\n//             {logEntries.length > 0 && (\n//               <div className=\"table-container\">\n//                 <div className=\"table-header\">\n//                   <span className=\"entry-count\">{logEntries.length} {logEntries.length === 1 ? 'Entry' : 'Entries'}</span>\n//                 </div>\n//                 <div className=\"table-wrapper\">\n//                   <table className=\"log-table\">\n//                     <thead>\n//                       <tr>\n//                         <th>Track ID</th>\n//                         <th>Frame ID</th>\n//                         <th>New Class ID</th>\n//                         <th>Actions</th>\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {logEntries.map((entry, index) => (\n//                         <tr key={index} className=\"table-row\">\n//                           <td className=\"track-id\">{entry.A}</td>\n//                           <td className=\"frame-id\">{entry.B}</td>\n//                           <td className=\"class-id\">\n//                             <span className=\"class-badge\">{entry.newClassId}</span>\n//                           </td>\n//                           <td className=\"actions\">\n//                             <button \n//                               onClick={() => removeEntry(index)}\n//                               className=\"btn-remove\"\n//                               title=\"Remove entry\"\n//                             >\n//                               ×\n//                             </button>\n//                           </td>\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n//               </div>\n//             )}\n\n//             {logEntries.length === 0 && csvUploaded && (\n//               <div className=\"empty-state\">\n//                 <div className=\"empty-icon\">📝</div>\n//                 <p>No changes registered yet</p>\n//                 <small>Fill in the fields above and click \"Register Changes\" to add entries</small>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div> \n//   );\n// }\n\n// // export { exportedFrameNumbers };\n// export default UploadSection;  \n\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport \"./UploadSection.css\";\n\n// frame_numbers = [30, 40, 50];\nlet exportedFrameNumbers = [];\n\nfunction UploadSection({ csvFile, onCsvUpload }) {\n  const [csvUploaded, setCsvUploaded] = useState(false);\n  const [logEntries, setLogEntries] = useState([]);\n  const [frameNumber, setFrameNumber] = useState(\"\");\n  const [newClassId, setNewClassId] = useState(\"\");\n  const [A, setA] = useState(\"\");\n  const [B, setB] = useState(\"\");\n  const [streamActive, setStreamActive] = useState(false);\n  const [notification, setNotification] = useState({ message: '', type: '', show: false });\n\n  // Notification helper function\n  const showNotification = (message, type = 'info', duration = 5000) => {\n    setNotification({ message, type, show: true });\n    setTimeout(() => {\n      setNotification(prev => ({ ...prev, show: false }));\n    }, duration);\n  };\n\n  useEffect(() => {\n    setCsvUploaded(!!csvFile);\n  }, [csvFile]);\n\n  const fetchFrameNumbers = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/get-frame-numbers');\n      if (response.data?.end_frames) {\n        exportedFrameNumbers = response.data.end_frames; // Update exported variable\n        // showNotification(`Received ${exportedFrameNumbers.length} frames successfully`, 'success');\n      }\n    } catch (error) {\n      console.error('Error fetching frames:', error);\n      showNotification(\n        <>\n          Error fetching frame data. Please ensure the backend server is running.{' '}\n          <a \n            href=\"https://sparshhgupta.github.io/trackvisiongui/#/installation\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            style={{ color: '#007bff', textDecoration: 'underline' }}\n          >\n            Click here to know the installation steps.\n          </a>\n        </>,\n        'error',\n        10000\n      );\n    }\n  };\n\n  const startMjpegStream = () => {\n    const mjpegContainer = document.querySelector('#mjpeg-container');\n    if (mjpegContainer) {\n      const timestamp = Date.now();\n      mjpegContainer.innerHTML = `\n        <img \n          src=\"http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}\" \n          alt=\"MJPEG Stream\" \n          data-mjpeg-stream=\"true\"\n          style=\"max-width: 100%; height: auto; border: 1px solid #ccc;\"\n          onload=\"this.style.opacity = '1'\"\n          onerror=\"console.error('MJPEG stream error')\"\n        />\n      `;\n      setStreamActive(true);\n    }\n  };\n\n  const handleCsvUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (file.type !== 'text/csv') {\n      showNotification('Please upload a valid CSV file.', 'error');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('csv', file);\n\n    try {\n      // Send CSV to backend for processing\n      const response = await axios.post('http://127.0.0.1:5000/upload-csv', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      if (response.status === 200) {\n        // showNotification('CSV file processed successfully. Starting MJPEG stream...', 'success');\n        \n        // Fetch frame numbers after successful upload\n        await fetchFrameNumbers();\n        \n        // Start the MJPEG stream\n        startMjpegStream();\n        \n        onCsvUpload(file, exportedFrameNumbers);\n        setCsvUploaded(true);\n      } else {\n        throw new Error('Server returned non-200 status');\n      }\n    } catch (error) {\n      console.error('CSV upload error:', error);\n      \n      let errorMessage = 'Error uploading CSV file';\n      if (error.response) {\n        errorMessage = error.response.data?.message || error.response.statusText || errorMessage;\n      } else {\n        errorMessage = error.message || errorMessage;\n      }\n      \n      // Check if it's a connection error to show installation link\n      if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error') || !error.response) {\n        showNotification(\n          <>\n            Error uploading CSV file. Please ensure the backend server is running.{' '}\n            <a \n              href=\"https://sparshhgupta.github.io/trackvisiongui/#/installation\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              style={{ color: '#007bff', textDecoration: 'underline' }}\n            >\n              Click here to know the installation steps.\n            </a>\n          </>,\n          'error',\n          10000\n        );\n      } else {\n        showNotification(errorMessage, 'error');\n      }\n    }\n  };\n\n  const handleLogChanges = () => {\n    if (!A.trim()) {\n      showNotification(\"Please enter the track id requiring modification before logging.\", 'warning');\n      return;\n    }\n    \n    setLogEntries([...logEntries, { newClassId, A, B }]);\n    // showNotification(`Entry added: Track ID ${A}${B ? ` (Frame: ${B})` : ''}`, 'success');\n    // setFrameNumber(\"\");\n    setNewClassId(\"\");\n    setA(\"\");\n    setB(\"\");\n  };\n\n  const handleClearTable = async () => {\n    if (logEntries.length === 0) {\n      showNotification(\"No data to send.\", 'warning');\n      return;\n    }\n    \n    try {\n      const response = await fetch(\"http://localhost:5000/save-logs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ logs: logEntries }),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok && data.success) {\n        // For MJPEG stream, we just need to refresh the image source\n        // The backend will automatically serve the updated frames\n        const mjpegImage = document.querySelector('img[data-mjpeg-stream]');\n        if (mjpegImage) {\n          // Force refresh by adding timestamp to prevent caching\n          const baseUrl = `http://127.0.0.1:5000/mjpeg-stream`;\n          const timestamp = Date.now();\n          mjpegImage.src = `${baseUrl}?t=${timestamp}`;\n        }\n        // showNotification(`Successfully saved ${logEntries.length} changes. Stream updated automatically.`, 'success');\n        setLogEntries([]);\n      } else {\n        showNotification(data.message || \"Failed to update ID and reprocess video.\", 'error');\n      }\n    } catch (error) {\n      console.error(\"Error updating ID:\", error);\n      \n      // Check if it's a connection error\n      if (error.message.includes('fetch') || error.name === 'TypeError') {\n        showNotification(\n          <>\n            Error connecting to server. Please ensure the backend server is running.{' '}\n            <a \n              href=\"https://sparshhgupta.github.io/trackvisiongui/#/installation\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              style={{ color: '#007bff', textDecoration: 'underline' }}\n            >\n              Click here to know the installation steps.\n            </a>\n          </>,\n          'error',\n          10000\n        );\n      } else {\n        showNotification(error.message || \"Error updating ID.\", 'error');\n      }\n    }\n  };\n\n  const refreshStream = () => {\n    const mjpegImage = document.querySelector('img[data-mjpeg-stream]');\n    if (mjpegImage) {\n      const timestamp = Date.now();\n      mjpegImage.src = `http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}`;\n      showNotification('Stream refreshed successfully', 'info', 2000);\n    } else {\n      showNotification('No active stream to refresh', 'warning');\n    }\n  };\n\n  const removeEntry = (indexToRemove) => {\n    const removedEntry = logEntries[indexToRemove];\n    setLogEntries(logEntries.filter((_, index) => index !== indexToRemove));\n    // showNotification(`Removed entry: Track ID ${removedEntry.A}`, 'info', 3000);\n  };\n\n  return (\n    <div className=\"upload-section\">\n      {/* Notification Component */}\n      {notification.show && (\n        <div \n          className={`notification notification-${notification.type}`}\n          style={{\n            position: 'fixed',\n            top: '20px',\n            right: '20px',\n            padding: '12px 20px',\n            borderRadius: '8px',\n            color: 'white',\n            fontSize: '14px',\n            fontWeight: '500',\n            zIndex: 1000,\n            maxWidth: '400px',\n            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n            animation: 'slideIn 0.3s ease-out',\n            backgroundColor: \n              notification.type === 'success' ? '#10b981' :\n              notification.type === 'error' ? '#ef4444' :\n              notification.type === 'warning' ? '#f59e0b' :\n              '#3b82f6'\n          }}\n        >\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <div style={{ flex: 1 }}>\n              {typeof notification.message === 'string' ? notification.message : notification.message}\n            </div>\n            <button\n              onClick={() => setNotification(prev => ({ ...prev, show: false }))}\n              style={{\n                background: 'none',\n                border: 'none',\n                color: 'white',\n                fontSize: '18px',\n                cursor: 'pointer',\n                marginLeft: '10px',\n                padding: '0',\n                lineHeight: '1'\n              }}\n            >\n              ×\n            </button>\n          </div>\n        </div>\n      )}\n\n      {!csvUploaded ? (\n        <>\n          <label htmlFor=\"csv-upload\" className=\"upload-btn\">Upload CSV</label>\n          <input\n            id=\"csv-upload\"\n            type=\"file\"\n            accept=\".csv\"\n            style={{ display: \"none\" }}\n            onChange={handleCsvUpload}\n          />\n        </>\n      ) : (\n        <div className=\"stream-section\">\n          {/* MJPEG Stream Container */}\n          {/* <div className=\"stream-container\">\n            <h3>Live Stream</h3>\n            <div id=\"mjpeg-container\" style={{ textAlign: 'center', marginBottom: '20px' }}>\n              {streamActive ? null : <p>Loading stream...</p>}\n            </div>\n            <button onClick={refreshStream} style={{ marginBottom: '20px' }}>\n              Refresh Stream\n            </button>\n          </div> */}\n\n          {/* Log Section */}\n          <div className=\"log-section\">\n            <h3 className=\"log-title\">Change Log</h3>\n            <div className=\"input-container\">\n              <div className=\"input-group\">\n                <input\n                  type=\"text\"\n                  placeholder=\"A\"\n                  value={A}\n                  onChange={(e) => setA(e.target.value)}\n                  className=\"styled-input\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"B\"\n                  value={B}\n                  onChange={(e) => setB(e.target.value)}\n                  className=\"styled-input\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"New Class ID\"\n                  value={newClassId}\n                  onChange={(e) => setNewClassId(e.target.value)}\n                  className=\"styled-input\"\n                />\n              </div>\n              <div className=\"button-group\">\n                <button onClick={handleLogChanges} className=\"btn-primary\">\n                  Register Changes\n                </button>\n                <button onClick={handleClearTable} className=\"btn-secondary\">\n                  Make Changes\n                </button>\n              </div>\n            </div>\n\n            {logEntries.length > 0 && (\n              <div className=\"table-container\">\n                <div className=\"table-header\">\n                  <span className=\"entry-count\">{logEntries.length} {logEntries.length === 1 ? 'Entry' : 'Entries'}</span>\n                </div>\n                <div className=\"table-wrapper\">\n                  <table className=\"log-table\">\n                    <thead>\n                      <tr>\n                        <th>Track ID</th>\n                        <th>Frame ID</th>\n                        <th>New Class ID</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {logEntries.map((entry, index) => (\n                        <tr key={index} className=\"table-row\">\n                          <td className=\"track-id\">{entry.A}</td>\n                          <td className=\"frame-id\">{entry.B}</td>\n                          <td className=\"class-id\">\n                            <span className=\"class-badge\">{entry.newClassId}</span>\n                          </td>\n                          <td className=\"actions\">\n                            <button \n                              onClick={() => removeEntry(index)}\n                              className=\"btn-remove\"\n                              title=\"Remove entry\"\n                            >\n                              ×\n                            </button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            )}\n\n            {logEntries.length === 0 && csvUploaded && (\n              <div className=\"empty-state\">\n                <div className=\"empty-icon\">📝</div>\n                <p>No changes registered yet</p>\n                <small>Fill in the fields above and click \"Register Changes\" to add entries</small>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <style jsx>{`\n        @keyframes slideIn {\n          from {\n            transform: translateX(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateX(0);\n            opacity: 1;\n          }\n        }\n      `}</style>\n    </div> \n  );\n}\n\n// export { exportedFrameNumbers };\nexport default UploadSection;","// import React, { useRef, useState, useEffect } from 'react';\r\n// import './VideoPlayer.css';\r\n// import axios from \"axios\";\r\n\r\n// function VideoPlayer({ csvFile }) {\r\n//   const [streamSrc, setStreamSrc] = useState(null);\r\n//   const [isStreaming, setIsStreaming] = useState(false);\r\n//   const [showIdPopup, setShowIdPopup] = useState(false);\r\n//   const [csvUploaded, setCsvUploaded] = useState(false);\r\n//   const [currentId, setCurrentId] = useState(\"\");\r\n//   const [newId, setNewId] = useState(\"\");\r\n//   const [currentFrame, setCurrentFrame] = useState(0);\r\n//   const [frameData, setFrameData] = useState({\r\n//     frames: [],\r\n//     trackIds: []\r\n//   });\r\n//   const [currentTrackId, setCurrentTrackId] = useState(null);\r\n//   const [currentFrameIndex, setCurrentFrameIndex] = useState(-1);\r\n//   const [isProcessing, setIsProcessing] = useState(false);\r\n//   const streamRef = useRef(null);\r\n//   const frameUpdateInterval = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     setCsvUploaded(!!csvFile);\r\n//     if (csvFile) {\r\n//       fetchFrameNumbers();\r\n//     }\r\n//   }, [csvFile]);\r\n\r\n//   const fetchFrameNumbers = async () => {\r\n//     try {\r\n//       const response = await axios.get('http://127.0.0.1:5000/get-frame-numbers');\r\n//       if (response.data.end_frames && response.data.track_ids) {\r\n//         setFrameData({\r\n//           frames: response.data.end_frames,\r\n//           trackIds: response.data.track_ids\r\n//         });\r\n//         console.log(\"Fetched frame data:\", response.data);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching frame numbers:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleVideoUpload = async (event) => {\r\n//     const file = event.target.files[0];\r\n//     if (file && file.type.startsWith('video/')) {\r\n//       const formData = new FormData();\r\n//       formData.append('video', file);\r\n\r\n//       try {\r\n//         const response = await axios.post('http://127.0.0.1:5000/upload-video', formData, {\r\n//           headers: {\r\n//             'Content-Type': 'multipart/form-data',\r\n//           },\r\n//         });\r\n//         if (response.data.success) {\r\n//           // Start MJPEG stream instead of setting video source\r\n//           startMjpegStream();\r\n//           alert('Video uploaded successfully. Starting stream...');\r\n//         } else {\r\n//           alert('Error uploading video. Please ensure the backend server is running. Click here to know the installation steps.');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Video upload error:', error);\r\n//         alert('Error uploading video.');\r\n//       }\r\n//     } else {\r\n//       alert('Please upload a valid video file.');\r\n//     }\r\n//   };\r\n\r\n//   const startMjpegStream = () => {\r\n//     const timestamp = Date.now();\r\n//     setStreamSrc(`http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}`);\r\n//     setIsStreaming(true);\r\n    \r\n//     // Start periodic frame updates to track current frame\r\n//     startFrameTracking();\r\n//   };\r\n\r\n//   const startFrameTracking = () => {\r\n//     // Clear any existing interval first\r\n//     stopFrameTracking();\r\n    \r\n//     // Poll backend for current frame information\r\n//     frameUpdateInterval.current = setInterval(async () => {\r\n//       try {\r\n//         const response = await axios.get('http://127.0.0.1:5000/current-frame');\r\n//         if (response.data.current_frame !== undefined && response.data.current_frame !== null) {\r\n//           setCurrentFrame(response.data.current_frame);\r\n//           updateCurrentFrameIndex(response.data.current_frame);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching current frame:\", error);\r\n//         // If we get persistent 400 errors, stop polling temporarily\r\n//         if (error.response && error.response.status === 400) {\r\n//           console.warn(\"Backend not ready, pausing frame tracking\");\r\n//           stopFrameTracking();\r\n//           // Retry after 2 seconds\r\n//           setTimeout(() => {\r\n//             if (isStreaming && !isProcessing) {\r\n//               startFrameTracking();\r\n//             }\r\n//           }, 2000);\r\n//         }\r\n//       }\r\n//     }, 150); // Slightly slower polling to reduce load\r\n//   };\r\n\r\n//   const stopFrameTracking = () => {\r\n//     if (frameUpdateInterval.current) {\r\n//       clearInterval(frameUpdateInterval.current);\r\n//       frameUpdateInterval.current = null;\r\n//     }\r\n//   };\r\n  \r\n//   const handleEditId = () => {\r\n//     setShowIdPopup(true);\r\n//     // Pause the stream tracking when editing\r\n//     stopFrameTracking();\r\n//   };\r\n\r\n//   const togglePlayPause = async () => {\r\n//     if (isProcessing) return; // Prevent double clicks\r\n    \r\n//     setIsProcessing(true);\r\n//     try {\r\n//       const response = await axios.post('http://127.0.0.1:5000/toggle-playback');\r\n//       if (response.data.success) {\r\n//         setIsStreaming(response.data.is_playing);\r\n//         if (response.data.is_playing) {\r\n//           startFrameTracking();\r\n//         } else {\r\n//           stopFrameTracking();\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error toggling playback:\", error);\r\n//     } finally {\r\n//       setIsProcessing(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleFrameSeek = async (frame) => {\r\n//     if (isProcessing) return; // Prevent multiple simultaneous seeks\r\n    \r\n//     setIsProcessing(true);\r\n//     try {\r\n//       // Stop tracking before seeking\r\n//       stopFrameTracking();\r\n      \r\n//       const response = await axios.post('http://127.0.0.1:5000/seek-frame', {\r\n//         frame: frame\r\n//       });\r\n      \r\n//       if (response.data.success) {\r\n//         setCurrentFrame(frame);\r\n//         updateCurrentFrameIndex(frame);\r\n        \r\n//         // Wait a moment for backend to process the seek\r\n//         await new Promise(resolve => setTimeout(resolve, 200));\r\n        \r\n//         // Refresh stream to show new frame\r\n//         refreshStream();\r\n        \r\n//         // Restart frame tracking after a short delay to ensure backend is ready\r\n//         setTimeout(() => {\r\n//           if (isStreaming && !isProcessing) {\r\n//             startFrameTracking();\r\n//           }\r\n//         }, 300);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error seeking frame:\", error);\r\n//       // Restart tracking even if seek failed\r\n//       setTimeout(() => {\r\n//         if (isStreaming) {\r\n//           startFrameTracking();\r\n//         }\r\n//       }, 300);\r\n//     } finally {\r\n//       setTimeout(() => setIsProcessing(false), 500); // Ensure processing state is cleared\r\n//     }\r\n//   };\r\n\r\n//   const refreshStream = () => {\r\n//     if (streamRef.current) {\r\n//       const timestamp = Date.now();\r\n//       const baseUrl = `http://127.0.0.1:5000/mjpeg-stream`;\r\n//       streamRef.current.src = `${baseUrl}?t=${timestamp}`;\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveId = async () => {\r\n//     try {\r\n//       const response = await axios.post('http://127.0.0.1:5000/update-id', {\r\n//         currentFrame: currentFrame,\r\n//         currentId: currentId,\r\n//         newId: newId,\r\n//       });\r\n  \r\n//       if (response.data.success) {\r\n//         // Refresh the stream to show updated annotations\r\n//         refreshStream();\r\n//         alert(\"ID updated successfully and stream refreshed.\");\r\n        \r\n//         // Wait a moment then restart frame tracking\r\n//         setTimeout(() => {\r\n//           startFrameTracking();\r\n//         }, 200);\r\n//       } else {\r\n//         alert(\"Failed to update ID.\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating ID:\", error);\r\n//       alert(\"Error updating ID.\");\r\n//     }\r\n  \r\n//     setShowIdPopup(false);\r\n//     setCurrentId(\"\");\r\n//     setNewId(\"\");\r\n//   };\r\n\r\n//   const updateCurrentFrameIndex = (frame) => {\r\n//     const index = frameData.frames.findIndex(f => f === frame);\r\n//     setCurrentFrameIndex(index);\r\n//     if (index >= 0) {\r\n//       setCurrentTrackId(frameData.trackIds[index]);\r\n//     } else {\r\n//       setCurrentTrackId(null);\r\n//     }\r\n//   };\r\n\r\n//   const navigateToFrame = (frame) => {\r\n//     handleFrameSeek(frame);\r\n//   };\r\n\r\n//   const navigatePrev = () => {\r\n//     if (frameData.frames.length === 0) {\r\n//       alert(\"No frame data available. Please upload a CSV file first.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (currentFrameIndex > 0) {\r\n//       // Move to previous frame in the array\r\n//       navigateToFrame(frameData.frames[currentFrameIndex - 1]);\r\n//     } else if (currentFrameIndex === 0) {\r\n//       // Already at first frame, optionally wrap to last frame\r\n//       navigateToFrame(frameData.frames[frameData.frames.length - 1]);\r\n//     } else {\r\n//       // currentFrameIndex is -1 (current frame not in array)\r\n//       // Find the closest previous frame in the array\r\n//       const closestPrevIndex = frameData.frames.findIndex(frame => frame >= currentFrame) - 1;\r\n//       if (closestPrevIndex >= 0) {\r\n//         navigateToFrame(frameData.frames[closestPrevIndex]);\r\n//       } else {\r\n//         // No previous frame found, go to last frame in array\r\n//         navigateToFrame(frameData.frames[frameData.frames.length - 1]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const navigateNext = () => {\r\n//     if (frameData.frames.length === 0) {\r\n//       alert(\"No frame data available. Please upload a CSV file first.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (currentFrameIndex >= 0 && currentFrameIndex < frameData.frames.length - 1) {\r\n//       // Move to next frame in the array\r\n//       navigateToFrame(frameData.frames[currentFrameIndex + 1]);\r\n//     } else if (currentFrameIndex === frameData.frames.length - 1) {\r\n//       // Already at last frame, optionally wrap to first frame\r\n//       navigateToFrame(frameData.frames[0]);\r\n//     } else {\r\n//       // currentFrameIndex is -1 (current frame not in array)\r\n//       // Find the closest next frame in the array\r\n//       const closestNextIndex = frameData.frames.findIndex(frame => frame > currentFrame);\r\n//       if (closestNextIndex >= 0) {\r\n//         navigateToFrame(frameData.frames[closestNextIndex]);\r\n//       } else {\r\n//         // No next frame found, go to first frame in array\r\n//         navigateToFrame(frameData.frames[0]);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Cleanup on unmount\r\n//   useEffect(() => {\r\n//     return () => {\r\n//       stopFrameTracking();\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"video-player\">\r\n//       {!streamSrc && (\r\n//         <>\r\n//           <label htmlFor=\"video-upload\" className=\"upload-btn\">Upload Video</label>\r\n//           <input\r\n//             id=\"video-upload\"\r\n//             type=\"file\"\r\n//             accept=\"video/*\"\r\n//             style={{ display: 'none' }}\r\n//             onChange={handleVideoUpload}\r\n//           />\r\n//         </>\r\n//       )}\r\n\r\n//       {streamSrc && (\r\n//         <div style={{ position: 'relative', width: '100%' }}>\r\n//           <img\r\n//             ref={streamRef}\r\n//             className=\"stream-element\"\r\n//             src={streamSrc}\r\n//             alt=\"MJPEG Stream\"\r\n//             style={{\r\n//               width: '100%',\r\n//               height: 'auto',\r\n//               maxHeight: '500px',\r\n//               border: '1px solid #ccc',\r\n//               filter: showIdPopup ? 'brightness(0.8)' : 'none'\r\n//             }}\r\n//             onError={(e) => {\r\n//               console.error(\"Stream error:\", e);\r\n//               // Try to refresh the stream on error\r\n//               setTimeout(refreshStream, 1000);\r\n//             }}\r\n//           />\r\n//           {showIdPopup && <div className=\"dimming-overlay\" />}\r\n//         </div>\r\n//       )}\r\n\r\n//       {streamSrc && (\r\n//         <div className=\"controls\">\r\n//           <button onClick={togglePlayPause} disabled={isProcessing}>\r\n//             {isProcessing ? 'Processing...' : (isStreaming ? 'Pause Stream' : 'Resume Stream')}\r\n//           </button>\r\n//           <button onClick={refreshStream} style={{ marginLeft: '10px' }}>\r\n//             Refresh Stream\r\n//           </button>\r\n//           <div className=\"frame-info\">\r\n//             <span>Frame: {currentFrame}</span>\r\n//             {currentTrackId !== null && (\r\n//               <span className=\"track-id\">| Track ID: {currentTrackId}</span>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {streamSrc && (\r\n//         <div className=\"frame-navigation\">\r\n//           <button onClick={navigatePrev} disabled={isProcessing}>Previous Frame</button>\r\n//           <button onClick={navigateNext} disabled={isProcessing}>Next Frame</button>\r\n          \r\n//           {/* Frame info display */}\r\n//           <div className=\"frame-info\">\r\n//             {frameData.frames.length > 0 && (\r\n//               <>\r\n//                 <span>Available frames: {frameData.frames.length} | </span>\r\n//                 <span>\r\n//                   Position: {currentFrameIndex >= 0 ? currentFrameIndex + 1 : 'N/A'} of {frameData.frames.length}\r\n//                 </span>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n          \r\n//           {/* Jump to specific frame from available frames */}\r\n//           <div className=\"frame-jump\">\r\n//             <label>Jump to Frame: </label>\r\n//             <select \r\n//               onChange={(e) => {\r\n//                 const selectedFrame = parseInt(e.target.value);\r\n//                 if (!isNaN(selectedFrame)) {\r\n//                   navigateToFrame(selectedFrame);\r\n//                 }\r\n//               }}\r\n//               value={frameData.frames.includes(currentFrame) ? currentFrame : ''}\r\n//               style={{ marginLeft: '5px', padding: '2px' }}\r\n//             >\r\n//               <option value=\"\">Select frame...</option>\r\n//               {frameData.frames.map((frame, index) => (\r\n//                 <option key={index} value={frame}>\r\n//                   Frame {frame} (Track ID: {frameData.trackIds[index]})\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n          \r\n//           {/* Manual frame input */}\r\n//           <div className=\"frame-input\">\r\n//             <label>Or enter frame number: </label>\r\n//             <input\r\n//               type=\"number\"\r\n//               min=\"0\"\r\n//               placeholder=\"Frame number\"\r\n//               onKeyPress={(e) => {\r\n//                 if (e.key === 'Enter') {\r\n//                   const frame = parseInt(e.target.value);\r\n//                   if (!isNaN(frame) && frame >= 0) {\r\n//                     navigateToFrame(frame);\r\n//                     e.target.value = '';\r\n//                   }\r\n//                 }\r\n//               }}\r\n//               style={{ marginLeft: '5px', width: '100px' }}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* <div className=\"save-download\">\r\n//         <button\r\n//           onClick={() => {\r\n//             if (csvUploaded) {\r\n//               handleEditId();\r\n//             } else {\r\n//               alert(\"Please upload a CSV file first to enable editing.\");\r\n//             }\r\n//           }}\r\n//           disabled={!csvUploaded}\r\n//         >\r\n//           Edit ID\r\n//         </button>\r\n//       </div> */}\r\n\r\n//       {/* {showIdPopup && (\r\n//         <div className=\"id-popup\">\r\n//           <h3>Update ID</h3>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Current ID\"\r\n//             value={currentId}\r\n//             onChange={(e) => setCurrentId(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"New ID\"\r\n//             value={newId}\r\n//             onChange={(e) => setNewId(e.target.value)}\r\n//           />\r\n//           <button onClick={handleSaveId}>Save ID</button>\r\n//           <button onClick={() => { \r\n//             setShowIdPopup(false);\r\n//             startFrameTracking(); // Resume tracking when closing popup\r\n//           }}>Close</button>\r\n//         </div>\r\n//       )} */}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoPlayer;\r\n\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport './VideoPlayer.css';\r\nimport axios from \"axios\";\r\n\r\nfunction VideoPlayer({ csvFile }) {\r\n  const [streamSrc, setStreamSrc] = useState(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const [showIdPopup, setShowIdPopup] = useState(false);\r\n  const [csvUploaded, setCsvUploaded] = useState(false);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n  const [newId, setNewId] = useState(\"\");\r\n  const [currentFrame, setCurrentFrame] = useState(0);\r\n  const [frameData, setFrameData] = useState({\r\n    frames: [],\r\n    trackIds: []\r\n  });\r\n  const [currentTrackId, setCurrentTrackId] = useState(null);\r\n  const [currentFrameIndex, setCurrentFrameIndex] = useState(-1);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [notification, setNotification] = useState({ message: '', type: '', show: false });\r\n  const streamRef = useRef(null);\r\n  const frameUpdateInterval = useRef(null);\r\n\r\n  // Notification helper function\r\n  const showNotification = (message, type = 'info', duration = 5000) => {\r\n    setNotification({ message, type, show: true });\r\n    setTimeout(() => {\r\n      setNotification(prev => ({ ...prev, show: false }));\r\n    }, duration);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCsvUploaded(!!csvFile);\r\n    if (csvFile) {\r\n      fetchFrameNumbers();\r\n    }\r\n  }, [csvFile]);\r\n\r\n  const fetchFrameNumbers = async () => {\r\n    try {\r\n      const response = await axios.get('http://127.0.0.1:5000/get-frame-numbers');\r\n      if (response.data.end_frames && response.data.track_ids) {\r\n        setFrameData({\r\n          frames: response.data.end_frames,\r\n          trackIds: response.data.track_ids\r\n        });\r\n        console.log(\"Fetched frame data:\", response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching frame numbers:\", error);\r\n      showNotification(\r\n        'Error fetching frame data. Please ensure the backend server is running.',\r\n        'error'\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleVideoUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    if (!file.type.startsWith('video/')) {\r\n      showNotification('Please upload a valid video file.', 'error');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('video', file);\r\n\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:5000/upload-video', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      if (response.data.success) {\r\n        startMjpegStream();\r\n        // showNotification('Video uploaded successfully. Starting stream...', 'success');\r\n      } else {\r\n        showNotification('Error uploading video. Please try again.', 'error');\r\n      }\r\n    } catch (error) {\r\n      console.error('Video upload error:', error);\r\n      showNotification(\r\n        <>\r\n          Error uploading video. Please ensure the backend server is running.{' '}\r\n          <a \r\n            href=\"https://sparshhgupta.github.io/trackvisiongui/#/installation\" \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\"\r\n            style={{ color: '#007bff', textDecoration: 'underline' }}\r\n          >\r\n            Click here to know the installation steps.\r\n          </a>\r\n        </>,\r\n        'error',\r\n        10000\r\n      );\r\n    }\r\n  };\r\n\r\n  const startMjpegStream = () => {\r\n    const timestamp = Date.now();\r\n    setStreamSrc(`http://127.0.0.1:5000/mjpeg-stream?t=${timestamp}`);\r\n    setIsStreaming(true);\r\n    \r\n    // Start periodic frame updates to track current frame\r\n    startFrameTracking();\r\n  };\r\n\r\n  const startFrameTracking = () => {\r\n    // Clear any existing interval first\r\n    stopFrameTracking();\r\n    \r\n    // Poll backend for current frame information\r\n    frameUpdateInterval.current = setInterval(async () => {\r\n      try {\r\n        const response = await axios.get('http://127.0.0.1:5000/current-frame');\r\n        if (response.data.current_frame !== undefined && response.data.current_frame !== null) {\r\n          setCurrentFrame(response.data.current_frame);\r\n          updateCurrentFrameIndex(response.data.current_frame);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching current frame:\", error);\r\n        // If we get persistent 400 errors, stop polling temporarily\r\n        if (error.response && error.response.status === 400) {\r\n          console.warn(\"Backend not ready, pausing frame tracking\");\r\n          stopFrameTracking();\r\n          // Retry after 2 seconds\r\n          setTimeout(() => {\r\n            if (isStreaming && !isProcessing) {\r\n              startFrameTracking();\r\n            }\r\n          }, 2000);\r\n        }\r\n      }\r\n    }, 150); // Slightly slower polling to reduce load\r\n  };\r\n\r\n  const stopFrameTracking = () => {\r\n    if (frameUpdateInterval.current) {\r\n      clearInterval(frameUpdateInterval.current);\r\n      frameUpdateInterval.current = null;\r\n    }\r\n  };\r\n  \r\n  const handleEditId = () => {\r\n    setShowIdPopup(true);\r\n    // Pause the stream tracking when editing\r\n    stopFrameTracking();\r\n  };\r\n\r\n  const togglePlayPause = async () => {\r\n    if (isProcessing) return; // Prevent double clicks\r\n    \r\n    setIsProcessing(true);\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:5000/toggle-playback');\r\n      if (response.data.success) {\r\n        setIsStreaming(response.data.is_playing);\r\n        if (response.data.is_playing) {\r\n          startFrameTracking();\r\n        } else {\r\n          stopFrameTracking();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error toggling playback:\", error);\r\n      showNotification('Error controlling playback. Please check your connection.', 'error');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleFrameSeek = async (frame) => {\r\n    if (isProcessing) return; // Prevent multiple simultaneous seeks\r\n    \r\n    setIsProcessing(true);\r\n    try {\r\n      // Stop tracking before seeking\r\n      stopFrameTracking();\r\n      \r\n      const response = await axios.post('http://127.0.0.1:5000/seek-frame', {\r\n        frame: frame\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        setCurrentFrame(frame);\r\n        updateCurrentFrameIndex(frame);\r\n        \r\n        // Wait a moment for backend to process the seek\r\n        await new Promise(resolve => setTimeout(resolve, 200));\r\n        \r\n        // Refresh stream to show new frame\r\n        refreshStream();\r\n        \r\n        // Restart frame tracking after a short delay to ensure backend is ready\r\n        setTimeout(() => {\r\n          if (isStreaming && !isProcessing) {\r\n            startFrameTracking();\r\n          }\r\n        }, 300);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error seeking frame:\", error);\r\n      showNotification('Error seeking to frame. Please try again.', 'error');\r\n      // Restart tracking even if seek failed\r\n      setTimeout(() => {\r\n        if (isStreaming) {\r\n          startFrameTracking();\r\n        }\r\n      }, 300);\r\n    } finally {\r\n      setTimeout(() => setIsProcessing(false), 500); // Ensure processing state is cleared\r\n    }\r\n  };\r\n\r\n  const refreshStream = () => {\r\n    if (streamRef.current) {\r\n      const timestamp = Date.now();\r\n      const baseUrl = `http://127.0.0.1:5000/mjpeg-stream`;\r\n      streamRef.current.src = `${baseUrl}?t=${timestamp}`;\r\n    }\r\n  };\r\n\r\n  const handleSaveId = async () => {\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:5000/update-id', {\r\n        currentFrame: currentFrame,\r\n        currentId: currentId,\r\n        newId: newId,\r\n      });\r\n  \r\n      if (response.data.success) {\r\n        // Refresh the stream to show updated annotations\r\n        refreshStream();\r\n        // showNotification(\"ID updated successfully and stream refreshed.\", 'success');\r\n        \r\n        // Wait a moment then restart frame tracking\r\n        setTimeout(() => {\r\n          startFrameTracking();\r\n        }, 200);\r\n      } else {\r\n        showNotification(\"Failed to update ID. Please try again.\", 'error');\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating ID:\", error);\r\n      showNotification(\"Error updating ID. Please check your connection.\", 'error');\r\n    }\r\n  \r\n    setShowIdPopup(false);\r\n    setCurrentId(\"\");\r\n    setNewId(\"\");\r\n  };\r\n\r\n  const updateCurrentFrameIndex = (frame) => {\r\n    const index = frameData.frames.findIndex(f => f === frame);\r\n    setCurrentFrameIndex(index);\r\n    if (index >= 0) {\r\n      setCurrentTrackId(frameData.trackIds[index]);\r\n    } else {\r\n      setCurrentTrackId(null);\r\n    }\r\n  };\r\n\r\n  const navigateToFrame = (frame) => {\r\n    handleFrameSeek(frame);\r\n  };\r\n\r\n  const navigatePrev = () => {\r\n    if (frameData.frames.length === 0) {\r\n      showNotification(\"No frame data available. Please upload a CSV file first.\", 'warning');\r\n      return;\r\n    }\r\n\r\n    if (currentFrameIndex > 0) {\r\n      // Move to previous frame in the array\r\n      navigateToFrame(frameData.frames[currentFrameIndex - 1]);\r\n    } else if (currentFrameIndex === 0) {\r\n      // Already at first frame, optionally wrap to last frame\r\n      navigateToFrame(frameData.frames[frameData.frames.length - 1]);\r\n    } else {\r\n      // currentFrameIndex is -1 (current frame not in array)\r\n      // Find the closest previous frame in the array\r\n      const closestPrevIndex = frameData.frames.findIndex(frame => frame >= currentFrame) - 1;\r\n      if (closestPrevIndex >= 0) {\r\n        navigateToFrame(frameData.frames[closestPrevIndex]);\r\n      } else {\r\n        // No previous frame found, go to last frame in array\r\n        navigateToFrame(frameData.frames[frameData.frames.length - 1]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const navigateNext = () => {\r\n    if (frameData.frames.length === 0) {\r\n      showNotification(\"No frame data available. Please upload a CSV file first.\", 'warning');\r\n      return;\r\n    }\r\n\r\n    if (currentFrameIndex >= 0 && currentFrameIndex < frameData.frames.length - 1) {\r\n      // Move to next frame in the array\r\n      navigateToFrame(frameData.frames[currentFrameIndex + 1]);\r\n    } else if (currentFrameIndex === frameData.frames.length - 1) {\r\n      // Already at last frame, optionally wrap to first frame\r\n      navigateToFrame(frameData.frames[0]);\r\n    } else {\r\n      // currentFrameIndex is -1 (current frame not in array)\r\n      // Find the closest next frame in the array\r\n      const closestNextIndex = frameData.frames.findIndex(frame => frame > currentFrame);\r\n      if (closestNextIndex >= 0) {\r\n        navigateToFrame(frameData.frames[closestNextIndex]);\r\n      } else {\r\n        // No next frame found, go to first frame in array\r\n        navigateToFrame(frameData.frames[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      stopFrameTracking();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"video-player\">\r\n      {/* Notification Component */}\r\n      {notification.show && (\r\n        <div \r\n          className={`notification notification-${notification.type}`}\r\n          style={{\r\n            position: 'fixed',\r\n            top: '20px',\r\n            right: '20px',\r\n            padding: '12px 20px',\r\n            borderRadius: '8px',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            fontWeight: '500',\r\n            zIndex: 1000,\r\n            maxWidth: '400px',\r\n            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\r\n            animation: 'slideIn 0.3s ease-out',\r\n            backgroundColor: \r\n              notification.type === 'success' ? '#10b981' :\r\n              notification.type === 'error' ? '#ef4444' :\r\n              notification.type === 'warning' ? '#f59e0b' :\r\n              '#3b82f6'\r\n          }}\r\n        >\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <div style={{ flex: 1 }}>\r\n              {typeof notification.message === 'string' ? notification.message : notification.message}\r\n            </div>\r\n            <button\r\n              onClick={() => setNotification(prev => ({ ...prev, show: false }))}\r\n              style={{\r\n                background: 'none',\r\n                border: 'none',\r\n                color: 'white',\r\n                fontSize: '18px',\r\n                cursor: 'pointer',\r\n                marginLeft: '10px',\r\n                padding: '0',\r\n                lineHeight: '1'\r\n              }}\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {!streamSrc && (\r\n        <>\r\n          <label htmlFor=\"video-upload\" className=\"upload-btn\">Upload Video</label>\r\n          <input\r\n            id=\"video-upload\"\r\n            type=\"file\"\r\n            accept=\"video/*\"\r\n            style={{ display: 'none' }}\r\n            onChange={handleVideoUpload}\r\n          />\r\n        </>\r\n      )}\r\n\r\n      {streamSrc && (\r\n        <div style={{ position: 'relative', width: '100%' }}>\r\n          <img\r\n            ref={streamRef}\r\n            className=\"stream-element\"\r\n            src={streamSrc}\r\n            alt=\"MJPEG Stream\"\r\n            style={{\r\n              width: '100%',\r\n              height: 'auto',\r\n              maxHeight: '500px',\r\n              border: '1px solid #ccc',\r\n              filter: showIdPopup ? 'brightness(0.8)' : 'none'\r\n            }}\r\n            onError={(e) => {\r\n              console.error(\"Stream error:\", e);\r\n              showNotification('Stream connection lost. Attempting to reconnect...', 'warning');\r\n              // Try to refresh the stream on error\r\n              setTimeout(refreshStream, 1000);\r\n            }}\r\n          />\r\n          {showIdPopup && <div className=\"dimming-overlay\" />}\r\n        </div>\r\n      )}\r\n\r\n      {streamSrc && (\r\n        <div className=\"controls\">\r\n          <button onClick={togglePlayPause} disabled={isProcessing}>\r\n            {isProcessing ? 'Processing...' : (isStreaming ? 'Pause Stream' : 'Resume Stream')}\r\n          </button>\r\n          <button onClick={refreshStream} style={{ marginLeft: '10px' }}>\r\n            Refresh Stream\r\n          </button>\r\n          <div className=\"frame-info\">\r\n            <span>Frame: {currentFrame}</span>\r\n            {currentTrackId !== null && (\r\n              <span className=\"track-id\">| Track ID: {currentTrackId}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {streamSrc && (\r\n        <div className=\"frame-navigation\">\r\n          <button onClick={navigatePrev} disabled={isProcessing}>Previous Frame</button>\r\n          <button onClick={navigateNext} disabled={isProcessing}>Next Frame</button>\r\n          \r\n          {/* Frame info display */}\r\n          <div className=\"frame-info\">\r\n            {frameData.frames.length > 0 && (\r\n              <>\r\n                <span>Available frames: {frameData.frames.length} | </span>\r\n                <span>\r\n                  Position: {currentFrameIndex >= 0 ? currentFrameIndex + 1 : 'N/A'} of {frameData.frames.length}\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Jump to specific frame from available frames */}\r\n          <div className=\"frame-jump\">\r\n            <label>Jump to Frame: </label>\r\n            <select \r\n              onChange={(e) => {\r\n                const selectedFrame = parseInt(e.target.value);\r\n                if (!isNaN(selectedFrame)) {\r\n                  navigateToFrame(selectedFrame);\r\n                }\r\n              }}\r\n              value={frameData.frames.includes(currentFrame) ? currentFrame : ''}\r\n              style={{ marginLeft: '5px', padding: '2px' }}\r\n            >\r\n              <option value=\"\">Select frame...</option>\r\n              {frameData.frames.map((frame, index) => (\r\n                <option key={index} value={frame}>\r\n                  Frame {frame} (Track ID: {frameData.trackIds[index]})\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          {/* Manual frame input */}\r\n          <div className=\"frame-input\">\r\n            <label>Or enter frame number: </label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              placeholder=\"Frame number\"\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  const frame = parseInt(e.target.value);\r\n                  if (!isNaN(frame) && frame >= 0) {\r\n                    navigateToFrame(frame);\r\n                    e.target.value = '';\r\n                  }\r\n                }\r\n              }}\r\n              style={{ marginLeft: '5px', width: '100px' }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* <div className=\"save-download\">\r\n        <button\r\n          onClick={() => {\r\n            if (csvUploaded) {\r\n              handleEditId();\r\n            } else {\r\n              showNotification(\"Please upload a CSV file first to enable editing.\", 'warning');\r\n            }\r\n          }}\r\n          disabled={!csvUploaded}\r\n        >\r\n          Edit ID\r\n        </button>\r\n      </div> */}\r\n\r\n      {/* {showIdPopup && (\r\n        <div className=\"id-popup\">\r\n          <h3>Update ID</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Current ID\"\r\n            value={currentId}\r\n            onChange={(e) => setCurrentId(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"New ID\"\r\n            value={newId}\r\n            onChange={(e) => setNewId(e.target.value)}\r\n          />\r\n          <button onClick={handleSaveId}>Save ID</button>\r\n          <button onClick={() => { \r\n            setShowIdPopup(false);\r\n            startFrameTracking(); // Resume tracking when closing popup\r\n          }}>Close</button>\r\n        </div>\r\n      )} */}\r\n\r\n      <style jsx>{`\r\n        @keyframes slideIn {\r\n          from {\r\n            transform: translateX(100%);\r\n            opacity: 0;\r\n          }\r\n          to {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoPlayer;","import React from \"react\";\r\nimport \"./DownloadCsvButton.css\";\r\n\r\nconst DownloadCsvButton = () => {\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/download_csv\", {\r\n        method: \"GET\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to download CSV\");\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n\r\n      const a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = \"updated_annotations.csv\";\r\n      document.body.appendChild(a);\r\n      a.click();\r\n\r\n      a.remove();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error(\"Error downloading CSV:\", error);\r\n      alert(\"Failed to download CSV\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleDownload} className=\"download-csv-btn\">\r\n      Download Updated CSV\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DownloadCsvButton;\r\n","import React, { useState } from \"react\";\r\nimport { ChevronDown, ChevronRight, Activity, Target, BarChart3, Info, Search, X, Download } from \"lucide-react\";\r\nimport \"./OutputsPage.css\";\r\nimport DownloadCsvButton from \"./DownloadCsvButton\";\r\n// Mock data structure based on your backend\r\nconst mockAnalyticsData = {\r\n  start_frame: 1,\r\n  end_frame: 150,\r\n  metrics: {\r\n    total_tracks: 12,\r\n    total_frames: 150,\r\n    avg_detections_per_frame: 3.2,\r\n    avg_track_duration: 45.3,\r\n    max_track_duration: 89,\r\n    min_track_duration: 12,\r\n    avg_track_fragmentation: 1.2,\r\n    avg_velocity_consistency: 0.85,\r\n    avg_size_consistency: 0.92,\r\n    avg_confidence_stability: 0.78,\r\n    track_stability_score: 0.85\r\n  },\r\n  tracks_summary: {\r\n    1: { start_frame: 1, end_frame: 89, total_detections: 85, gaps: 2, avg_confidence: 0.92 },\r\n    2: { start_frame: 15, end_frame: 145, total_detections: 120, gaps: 1, avg_confidence: 0.87 },\r\n    3: { start_frame: 25, end_frame: 67, total_detections: 40, gaps: 0, avg_confidence: 0.95 },\r\n    4: { start_frame: 45, end_frame: 150, total_detections: 98, gaps: 3, avg_confidence: 0.83 },\r\n    5: { start_frame: 12, end_frame: 34, total_detections: 22, gaps: 1, avg_confidence: 0.89 }\r\n  }\r\n};\r\n\r\nconst AnalyticsSection = ({ title, icon: Icon, children, defaultOpen = false }) => {\r\n  const [isOpen, setIsOpen] = useState(defaultOpen);\r\n\r\n  return (\r\n    <div className=\"analytics-section-container\">\r\n      <button \r\n        className={`analytics-section-header ${isOpen ? 'open' : ''}`}\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <div className=\"section-title-container\">\r\n          <Icon size={20} className=\"section-icon\" />\r\n          <h3 className=\"section-title\">{title}</h3>\r\n        </div>\r\n        {isOpen ? <ChevronDown size={20} /> : <ChevronRight size={20} />}\r\n      </button>\r\n      \r\n      <div className={`analytics-section-content ${isOpen ? 'open' : ''}`}>\r\n        <div className=\"section-content-inner\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MetricItem = ({ label, value, type = \"default\" }) => {\r\n  const formatValue = (val) => {\r\n    if (typeof val === 'number') {\r\n      if (label.toLowerCase().includes('score') || label.toLowerCase().includes('consistency') || label.toLowerCase().includes('stability')) {\r\n        return (val * 100).toFixed(1) + '%';\r\n      }\r\n      return val % 1 === 0 ? val.toString() : val.toFixed(2);\r\n    }\r\n    return val;\r\n  };\r\n\r\n  const getMetricClass = () => {\r\n    if (type === 'highlight') return 'metric-highlight';\r\n    if (type === 'warning' && typeof value === 'number' && value < 0.5) return 'metric-warning';\r\n    return 'metric-default';\r\n  };\r\n\r\n  return (\r\n    <div className={`metric-item ${getMetricClass()}`}>\r\n      <span className=\"metric-label\">{label.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</span>\r\n      <span className=\"metric-value\">{formatValue(value)}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TrackCard = ({ trackId, summary, trackStatus }) => {\r\n  const duration = summary.end_frame - summary.start_frame + 1;\r\n\r\n  return (\r\n    <div className={`track-card track-${trackStatus}`}>\r\n      <div className=\"track-header\">\r\n        <span className=\"track-id\">Track {trackId}</span>\r\n        <span className={`track-status ${trackStatus}`}>\r\n          {trackStatus.toUpperCase()}\r\n        </span>\r\n      </div>\r\n      <div className=\"track-details\">\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Duration:</span>\r\n          <span className=\"detail-value\">{duration} frames ({summary.start_frame}-{summary.end_frame})</span>\r\n        </div>\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Detections:</span>\r\n          <span className=\"detail-value\">{summary.total_detections}</span>\r\n        </div>\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Gaps:</span>\r\n          <span className=\"detail-value\">{summary.gaps}</span>\r\n        </div>\r\n        <div className=\"track-detail-row\">\r\n          <span className=\"detail-label\">Avg Confidence:</span>\r\n          <span className=\"detail-value\">{(summary.avg_confidence * 100).toFixed(1)}%</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AnalyticsDashboard = () => {\r\n  const [analyticsData, setAnalyticsData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [showAnalytics, setShowAnalytics] = useState(true);\r\n  const [trackIdSearch, setTrackIdSearch] = useState(\"\");\r\n  const [frameSearch, setFrameSearch] = useState(\"\");\r\n  const [trackStatusFilter, setTrackStatusFilter] = useState(\"all\");\r\n\r\n  const loadAnalytics = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Replace with your actual API call\r\n      const response = await fetch('http://127.0.0.1:5000/analytics');\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to fetch analytics');\r\n      }\r\n\r\n      setAnalyticsData(data);\r\n      setShowAnalytics(true);\r\n    } catch (err) {\r\n      console.error('Error loading analytics:', err);\r\n      setError(err.message);\r\n      // For demo purposes, we'll still show mock data\r\n      setShowAnalytics(true);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTrackStatus = (summary) => {\r\n    if (summary.avg_confidence > 0.9) return 'excellent';\r\n    if (summary.avg_confidence > 0.7) return 'good';\r\n    if (summary.avg_confidence > 0.5) return 'fair';\r\n    return 'poor';\r\n  };\r\n\r\n  const filteredTracks = () => {\r\n    let tracks = Object.entries(analyticsData.tracks_summary);\r\n    \r\n    // Filter by track ID search\r\n    if (trackIdSearch) {\r\n      tracks = tracks.filter(([trackId]) => {\r\n        return trackId.toString().toLowerCase().includes(trackIdSearch.toLowerCase());\r\n      });\r\n    }\r\n    \r\n    // Filter by frame search (check if frame is within track's range)\r\n    if (frameSearch) {\r\n      const searchFrame = parseInt(frameSearch);\r\n      if (!isNaN(searchFrame)) {\r\n        tracks = tracks.filter(([trackId, summary]) => {\r\n          return searchFrame >= summary.start_frame && searchFrame <= summary.end_frame;\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Filter by status\r\n    if (trackStatusFilter !== \"all\") {\r\n      tracks = tracks.filter(([trackId, summary]) => {\r\n        return getTrackStatus(summary) === trackStatusFilter;\r\n      });\r\n    }\r\n    \r\n    return tracks;\r\n  };\r\n\r\n  const getTrackStats = () => {\r\n    const tracks = Object.entries(analyticsData.tracks_summary);\r\n    const stats = {\r\n      all: tracks.length,\r\n      excellent: 0,\r\n      good: 0,\r\n      fair: 0,\r\n      poor: 0\r\n    };\r\n    \r\n    tracks.forEach(([trackId, summary]) => {\r\n      const status = getTrackStatus(summary);\r\n      stats[status]++;\r\n    });\r\n    \r\n    return stats;\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setTrackIdSearch(\"\");\r\n    setFrameSearch(\"\");\r\n    setTrackStatusFilter(\"all\");\r\n  };\r\n\r\n  const hasActiveFilters = () => {\r\n    return trackIdSearch || frameSearch || trackStatusFilter !== \"all\";\r\n  };\r\n\r\n  const getKeyMetrics = () => {\r\n    const { metrics } = analyticsData;\r\n    return {\r\n      'Total Tracks': metrics.total_tracks,\r\n      'Total Frames': metrics.total_frames,\r\n      'Avg Detections/Frame': metrics.avg_detections_per_frame,\r\n      // 'Track Stability Score': metrics.track_stability_score\r\n    };\r\n  };\r\n\r\n  const getPerformanceMetrics = () => {\r\n    const { metrics } = analyticsData;\r\n    return {\r\n      'Avg Track Duration': metrics.avg_track_duration,\r\n      'Max Track Duration': metrics.max_track_duration,\r\n      'Min Track Duration': metrics.min_track_duration,\r\n      'Avg Track Fragmentation': metrics.avg_track_fragmentation,\r\n      // 'Avg Velocity Consistency': metrics.avg_velocity_consistency,\r\n      'Avg Size Consistency': metrics.avg_size_consistency,\r\n      'Avg Confidence Stability': metrics.avg_confidence_stability\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>\r\n      <h1>Analytics Dashboard</h1>\r\n      \r\n      <div className=\"outputs-actions\">\r\n        <button \r\n          className=\"analytics-btn\" \r\n          onClick={loadAnalytics}\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Loading...' : '📊 View Analytics'}\r\n        </button>\r\n        <DownloadCsvButton />\r\n\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"analytics-error\">\r\n          <h3>❌ Error Loading Analytics</h3>\r\n          <p>{error}</p>\r\n          <p>Please check if your CSV file is uploaded and try again.</p>\r\n        </div>\r\n      )}\r\n\r\n      {loading && (\r\n        <div className=\"analytics-loading\">\r\n          <div className=\"spinner\"></div>\r\n          <p>Loading analytics data...</p>\r\n        </div>\r\n      )}\r\n\r\n      {showAnalytics && analyticsData && !loading && (\r\n        <div className=\"analytics-dashboard\">\r\n          <div className=\"analytics-header\">\r\n            <h2>📊 Analytics Dashboard</h2>\r\n            <button \r\n              className=\"close-analytics-btn\"\r\n              onClick={() => setShowAnalytics(false)}\r\n            >\r\n              ✕\r\n            </button>\r\n          </div>\r\n\r\n          {/* Frame Range Info */}\r\n          <div className=\"frame-info\">\r\n            <div className=\"frame-range\">\r\n              Frame {analyticsData.start_frame} - {analyticsData.end_frame}\r\n            </div>\r\n            <div className=\"frame-label\">\r\n              Analysis Range • Total: {analyticsData.end_frame - analyticsData.start_frame + 1} frames\r\n            </div>\r\n          </div>\r\n\r\n          {/* Key Metrics Section */}\r\n          <AnalyticsSection title=\"Key Metrics\" icon={Info} defaultOpen={true}>\r\n            <div className=\"metrics-grid\">\r\n              {Object.entries(getKeyMetrics()).map(([key, value]) => (\r\n                <MetricItem key={key} label={key} value={value} type=\"highlight\" />\r\n              ))}\r\n            </div>\r\n          </AnalyticsSection>\r\n\r\n          {/* Performance Metrics Section */}\r\n          <AnalyticsSection title=\"Performance Metrics\" icon={BarChart3}>\r\n            <div className=\"metrics-grid\">\r\n              {Object.entries(getPerformanceMetrics()).map(([key, value]) => (\r\n                <MetricItem key={key} label={key} value={value} type=\"default\" />\r\n              ))}\r\n            </div>\r\n          </AnalyticsSection>\r\n\r\n          {/* Tracks Summary Section */}\r\n          <AnalyticsSection title=\"Individual Tracks\" icon={Target}>\r\n            <div className=\"tracks-search-container\">\r\n              {/* Search Inputs Row */}\r\n              <div className=\"search-inputs-row\">\r\n                {/* Track ID Search */}\r\n                <div className=\"search-input-container\">\r\n                  <label className=\"search-input-label\">Search by Track ID</label>\r\n                  <Search className=\"search-icon\" size={16} />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"search-input\"\r\n                    placeholder=\"Enter track ID (e.g., 1, 2, 3...)\"\r\n                    value={trackIdSearch}\r\n                    onChange={(e) => setTrackIdSearch(e.target.value)}\r\n                  />\r\n                  {trackIdSearch && (\r\n                    <button className=\"clear-search\" onClick={() => setTrackIdSearch(\"\")}>\r\n                      <X size={14} />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Frame Search */}\r\n                <div className=\"search-input-container\">\r\n                  <label className=\"search-input-label\">Search by Frame Number</label>\r\n                  <Search className=\"search-icon\" size={16} />\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"search-input\"\r\n                    placeholder=\"Enter frame number (e.g., 105)\"\r\n                    value={frameSearch}\r\n                    onChange={(e) => setFrameSearch(e.target.value)}\r\n                    min=\"1\"\r\n                  />\r\n                  {frameSearch && (\r\n                    <button className=\"clear-search\" onClick={() => setFrameSearch(\"\")}>\r\n                      <X size={14} />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Clear All Button */}\r\n                {hasActiveFilters() && (\r\n                  <button className=\"clear-all-searches\" onClick={clearSearch}>\r\n                    Clear All\r\n                  </button>\r\n                )}\r\n              </div>\r\n\r\n              {/* Status Filters */}\r\n              <div className=\"filter-container\">\r\n                <span className=\"filter-label\">Filter by Quality:</span>\r\n                <div className=\"status-filters\">\r\n                  {Object.entries(getTrackStats()).map(([status, count]) => (\r\n                    <button\r\n                      key={status}\r\n                      className={`status-filter-btn ${status} ${trackStatusFilter === status ? 'active' : ''}`}\r\n                      onClick={() => setTrackStatusFilter(status)}\r\n                    >\r\n                      {status} ({count})\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Search Results Info */}\r\n              {hasActiveFilters() && (\r\n                <div className=\"search-results-info\">\r\n                  <span className=\"results-count\">\r\n                    Showing {filteredTracks().length} of {Object.keys(analyticsData.tracks_summary).length} tracks\r\n                    {trackIdSearch && ` • Track ID: \"${trackIdSearch}\"`}\r\n                    {frameSearch && ` • Frame: ${frameSearch}`}\r\n                    {trackStatusFilter !== \"all\" && ` • Quality: ${trackStatusFilter}`}\r\n                  </span>\r\n                  <button className=\"clear-all-btn\" onClick={clearSearch}>\r\n                    Clear Filters\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {filteredTracks().length > 0 ? (\r\n              <div className=\"tracks-grid\">\r\n                {filteredTracks().map(([trackId, summary]) => (\r\n                  <TrackCard \r\n                    key={trackId} \r\n                    trackId={trackId} \r\n                    summary={summary} \r\n                    trackStatus={getTrackStatus(summary)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"no-results\">\r\n                <h3>No tracks found</h3>\r\n                <p>\r\n                  {trackIdSearch && `No tracks found with ID containing \"${trackIdSearch}\"`}\r\n                  {frameSearch && !trackIdSearch && `No tracks found containing frame ${frameSearch}`}\r\n                  {trackIdSearch && frameSearch && ` or containing frame ${frameSearch}`}\r\n                  {!trackIdSearch && !frameSearch && trackStatusFilter !== \"all\" && `No ${trackStatusFilter} quality tracks found`}\r\n                  {!trackIdSearch && !frameSearch && trackStatusFilter === \"all\" && \"Try adjusting your search criteria\"}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </AnalyticsSection>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsDashboard;","// import React, { useState } from 'react';\r\n// import { Menu, X, Sun, Moon, Trash2, Info, RefreshCw } from 'lucide-react';\r\n// import './AccessBar.css';\r\n\r\n// const AccessBar = () => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n//   const [displayMode, setDisplayMode] = useState('all'); // 'all' or 'specific'\r\n//   const [specificIds, setSpecificIds] = useState([]);\r\n//   const [newId, setNewId] = useState('');\r\n//   const [filterInfo, setFilterInfo] = useState(null);\r\n\r\n//   const toggleAccessBar = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const closeAccessBar = () => {\r\n//     setIsOpen(false);\r\n//   };\r\n\r\n//   const handleDisplayModeChange = (mode) => {\r\n//     setDisplayMode(mode);\r\n    \r\n//     // Only trigger endpoint for 'all' mode immediately\r\n//     if (mode === 'all') {\r\n//       triggerEndpoint('/render-all-ids');\r\n//     }\r\n//     // For 'specific' mode, we'll wait for user to click \"Apply Filter\" button\r\n//   };\r\n\r\n//   const addSpecificId = () => {\r\n//     if (newId.trim() && !specificIds.includes(newId.trim())) {\r\n//       const updatedIds = [...specificIds, newId.trim()];\r\n//       setSpecificIds(updatedIds);\r\n//       setNewId('');\r\n//       // Don't trigger endpoint automatically - wait for \"Apply Filter\" button\r\n//     }\r\n//   };\r\n\r\n//   const removeSpecificId = (idToRemove) => {\r\n//     // Remove the ID from the list\r\n//     const updatedIds = specificIds.filter(id => id !== idToRemove);\r\n//     setSpecificIds(updatedIds);\r\n//     // Don't trigger endpoint automatically - wait for \"Apply Filter\" button\r\n//   };\r\n\r\n//   // New function to apply the specific IDs filter\r\n//   const applySpecificIdsFilter = () => {\r\n//     if (displayMode === 'specific') {\r\n//       triggerEndpoint('/render-specific-ids', specificIds);\r\n//     }\r\n//   };\r\n\r\n//   const handleKeyPress = (e) => {\r\n//     if (e.key === 'Enter') {\r\n//       addSpecificId();\r\n//     }\r\n//   };\r\n\r\n//   const triggerEndpoint = async (endpoint, ids = null) => {\r\n//     try {\r\n//       const requestBody = endpoint === '/render-specific-ids' ? { ids } : {};\r\n      \r\n//       // Add base URL if needed\r\n//       const baseUrl = 'http://127.0.0.1:5000'; // Adjust if your Flask server runs on different host/port\r\n//       const fullUrl = `${baseUrl}${endpoint}`;\r\n      \r\n//       console.log(`Calling endpoint: ${fullUrl}`, requestBody);\r\n      \r\n//       const response = await fetch(fullUrl, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(requestBody),\r\n//       });\r\n      \r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         console.error(`Failed to call ${endpoint}:`, response.status, errorText);\r\n//       } else {\r\n//         const responseData = await response.json();\r\n//         console.log(`Successfully called ${endpoint}:`, responseData);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(`Error calling ${endpoint}:`, error);\r\n//     }\r\n//   };\r\n\r\n//   // New function to get display filter info\r\n//   const getDisplayFilterInfo = async () => {\r\n//     try {\r\n//       const baseUrl = 'http://127.0.0.1:5000';\r\n//       const response = await fetch(`${baseUrl}/get-display-filter-info`, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         setFilterInfo(data.filter_info);\r\n//         console.log('Filter info:', data.filter_info);\r\n//       } else {\r\n//         const errorText = await response.text();\r\n//         console.error('Failed to get display filter info:', response.status, errorText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error getting display filter info:', error);\r\n//     }\r\n//   };\r\n\r\n//   // New function to clear specific IDs\r\n//   const clearSpecificIds = async () => {\r\n//     try {\r\n//       const baseUrl = 'http://127.0.0.1:5000';\r\n//       const response = await fetch(`${baseUrl}/clear-specific-ids`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n      \r\n//       if (response.ok) {\r\n//         const responseData = await response.json();\r\n//         setSpecificIds([]);\r\n//         setDisplayMode('all');\r\n//         console.log('Successfully cleared specific IDs:', responseData);\r\n//       } else {\r\n//         const errorText = await response.text();\r\n//         console.error('Failed to clear specific IDs:', response.status, errorText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error clearing specific IDs:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {/* Hamburger Menu Button */}\r\n//       <button \r\n//         onClick={toggleAccessBar}\r\n//         className=\"hamburger-btn\"\r\n//         aria-label=\"Open access menu\"\r\n//       >\r\n//         <Menu size={24} />\r\n//       </button>\r\n\r\n//       {/* Overlay */}\r\n//       {isOpen && <div className=\"access-overlay\" onClick={closeAccessBar}></div>}\r\n\r\n//       {/* Access Bar Panel */}\r\n//       <div className={`access-bar ${isOpen ? 'open' : ''}`}>\r\n//         {/* Header with close button */}\r\n//         <div className=\"access-header\">\r\n//           <h2>Menu</h2>\r\n//           <button \r\n//             onClick={closeAccessBar}\r\n//             className=\"close-btn\"\r\n//             aria-label=\"Close access menu\"\r\n//           >\r\n//             <X size={24} />\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Navigation Content */}\r\n//         <div className=\"access-content\">\r\n\r\n//           {/* Display Section */}\r\n//           <div className=\"nav-section\">\r\n//             <h3>Display</h3>\r\n//             <div className=\"nav-items\">\r\n//               {/* Radio buttons for display mode */}\r\n//               <div className=\"radio-group\">\r\n//                 <label className=\"radio-option\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name=\"displayMode\"\r\n//                     value=\"all\"\r\n//                     checked={displayMode === 'all'}\r\n//                     onChange={() => handleDisplayModeChange('all')}\r\n//                   />\r\n//                   <span>All IDs</span>\r\n//                 </label>\r\n                \r\n//                 <label className=\"radio-option\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name=\"displayMode\"\r\n//                     value=\"specific\"\r\n//                     checked={displayMode === 'specific'}\r\n//                     onChange={() => handleDisplayModeChange('specific')}\r\n//                   />\r\n//                   <span>Specific IDs</span>\r\n//                 </label>\r\n//               </div>\r\n\r\n//               {/* Specific IDs input section */}\r\n//               {displayMode === 'specific' && (\r\n//                 <div className=\"specific-ids-section\">\r\n//                   <div className=\"id-input-container\">\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={newId}\r\n//                       onChange={(e) => setNewId(e.target.value)}\r\n//                       onKeyPress={handleKeyPress}\r\n//                       placeholder=\"Enter ID\"\r\n//                       className=\"id-input\"\r\n//                     />\r\n//                     <button\r\n//                       onClick={addSpecificId}\r\n//                       className=\"add-id-btn\"\r\n//                       disabled={!newId.trim() || specificIds.includes(newId.trim())}\r\n//                     >\r\n//                       Add\r\n//                     </button>\r\n//                   </div>\r\n\r\n//                   {/* Display list of specific IDs */}\r\n//                   {specificIds.length > 0 && (\r\n//                     <div className=\"ids-list\">\r\n//                       {specificIds.map((id, index) => (\r\n//                         <div key={index} className=\"id-item\">\r\n//                           <span className=\"id-text\">{id}</span>\r\n//                           <button\r\n//                             onClick={() => removeSpecificId(id)}\r\n//                             className=\"remove-id-btn\"\r\n//                             aria-label={`Remove ID ${id}`}\r\n//                           >\r\n//                             <Trash2 size={16} />\r\n//                           </button>\r\n//                         </div>\r\n//                       ))}\r\n                      \r\n//                       {/* Apply Filter Button */}\r\n//                       <div className=\"apply-filter-container\">\r\n//                         <button \r\n//                           onClick={applySpecificIdsFilter}\r\n//                           className=\"apply-filter-btn\"\r\n//                         >\r\n//                           Apply Filter ({specificIds.length} IDs)\r\n//                         </button>\r\n//                       </div>\r\n//                     </div>\r\n//                   )}\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default AccessBar;\r\n\r\nimport React, { useState } from 'react';\r\nimport { Menu, X, Sun, Moon, Trash2, Info, RefreshCw } from 'lucide-react';\r\nimport './AccessBar.css';\r\n\r\nconst AccessBar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [displayMode, setDisplayMode] = useState('all'); // 'all' or 'specific'\r\n  const [includeIds, setIncludeIds] = useState([]);\r\n  const [excludeIds, setExcludeIds] = useState([]);\r\n  const [newId, setNewId] = useState('');\r\n  const [filterInfo, setFilterInfo] = useState(null);\r\n\r\n  const toggleAccessBar = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const closeAccessBar = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleDisplayModeChange = (mode) => {\r\n    setDisplayMode(mode);\r\n    \r\n    // Only trigger endpoint for 'all' mode immediately\r\n    if (mode === 'all') {\r\n      triggerEndpoint('/render-all-ids');\r\n    }\r\n    // For 'specific' mode, we'll wait for user to click \"Apply Filter\" button\r\n  };\r\n\r\n  const addToIncludeIds = () => {\r\n    if (newId.trim() && !includeIds.includes(newId.trim()) && !excludeIds.includes(newId.trim())) {\r\n      const updatedIds = [...includeIds, newId.trim()];\r\n      setIncludeIds(updatedIds);\r\n      setNewId('');\r\n    }\r\n  };\r\n\r\n  const addToExcludeIds = () => {\r\n    if (newId.trim() && !excludeIds.includes(newId.trim()) && !includeIds.includes(newId.trim())) {\r\n      const updatedIds = [...excludeIds, newId.trim()];\r\n      setExcludeIds(updatedIds);\r\n      setNewId('');\r\n    }\r\n  };\r\n\r\n  const removeFromIncludeIds = (idToRemove) => {\r\n    const updatedIds = includeIds.filter(id => id !== idToRemove);\r\n    setIncludeIds(updatedIds);\r\n  };\r\n\r\n  const removeFromExcludeIds = (idToRemove) => {\r\n    const updatedIds = excludeIds.filter(id => id !== idToRemove);\r\n    setExcludeIds(updatedIds);\r\n  };\r\n\r\n  // Check if ID already exists in either list\r\n  const isIdDuplicate = () => {\r\n    return newId.trim() && (includeIds.includes(newId.trim()) || excludeIds.includes(newId.trim()));\r\n  };\r\n\r\n  // Function to apply the specific IDs filter\r\n  const applySpecificIdsFilter = () => {\r\n    if (displayMode === 'specific') {\r\n      // Handle different scenarios\r\n      if (includeIds.length > 0 && excludeIds.length === 0) {\r\n        // Only include mode\r\n        console.log('Including only IDs:', includeIds);\r\n        triggerEndpoint('/render-specific-ids', includeIds, 'include');\r\n      } else if (excludeIds.length > 0 && includeIds.length === 0) {\r\n        // Only exclude mode\r\n        console.log('Excluding IDs:', excludeIds);\r\n        triggerEndpoint('/render-specific-ids', excludeIds, 'exclude');\r\n      } else if (includeIds.length > 0 && excludeIds.length > 0) {\r\n        // Both include and exclude - prioritize include\r\n        console.warn('Both include and exclude IDs specified - prioritizing include mode');\r\n        triggerEndpoint('/render-specific-ids', includeIds, 'include');\r\n      } else {\r\n        console.warn('No IDs specified for filtering');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      // Default to Include when Enter is pressed, if ID is valid and not duplicate\r\n      if (!isIdDuplicate() && newId.trim()) {\r\n        addToIncludeIds();\r\n      }\r\n    }\r\n  };\r\n\r\n  const triggerEndpoint = async (endpoint, ids = null, mode = null) => {\r\n    try {\r\n      let requestBody = {};\r\n      \r\n      if (endpoint === '/render-specific-ids') {\r\n        requestBody = { ids };\r\n        if (mode) {\r\n          requestBody.mode = mode;\r\n        }\r\n      }\r\n      \r\n      // Add base URL if needed\r\n      const baseUrl = 'http://127.0.0.1:5000'; // Adjust if your Flask server runs on different host/port\r\n      const fullUrl = `${baseUrl}${endpoint}`;\r\n      \r\n      console.log(`Calling endpoint: ${fullUrl}`, requestBody);\r\n      \r\n      const response = await fetch(fullUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`Failed to call ${endpoint}:`, response.status, errorText);\r\n      } else {\r\n        const responseData = await response.json();\r\n        console.log(`Successfully called ${endpoint}:`, responseData);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error calling ${endpoint}:`, error);\r\n    }\r\n  };\r\n\r\n  // Function to get display filter info\r\n  const getDisplayFilterInfo = async () => {\r\n    try {\r\n      const baseUrl = 'http://127.0.0.1:5000';\r\n      const response = await fetch(`${baseUrl}/get-display-filter-info`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setFilterInfo(data.filter_info);\r\n        console.log('Filter info:', data.filter_info);\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error('Failed to get display filter info:', response.status, errorText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting display filter info:', error);\r\n    }\r\n  };\r\n\r\n  // Function to clear all specific IDs\r\n  const clearAllSpecificIds = async () => {\r\n    try {\r\n      const baseUrl = 'http://127.0.0.1:5000';\r\n      const response = await fetch(`${baseUrl}/clear-specific-ids`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const responseData = await response.json();\r\n        // Clear frontend state immediately after successful backend call\r\n        setIncludeIds([]);\r\n        setExcludeIds([]);\r\n        setDisplayMode('all');\r\n        console.log('Successfully cleared specific IDs:', responseData);\r\n        \r\n        // The backend already handles switching to 'all' mode, so no need to call render-all-ids again\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error('Failed to clear specific IDs:', response.status, errorText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing specific IDs:', error);\r\n    }\r\n  };\r\n\r\n  const totalIds = includeIds.length + excludeIds.length;\r\n\r\n  return (\r\n    <>\r\n      {/* Hamburger Menu Button */}\r\n      <button \r\n        onClick={toggleAccessBar}\r\n        className=\"hamburger-btn\"\r\n        aria-label=\"Open access menu\"\r\n      >\r\n        <Menu size={24} />\r\n      </button>\r\n\r\n      {/* Overlay */}\r\n      {isOpen && <div className=\"access-overlay\" onClick={closeAccessBar}></div>}\r\n\r\n      {/* Access Bar Panel */}\r\n      <div className={`access-bar ${isOpen ? 'open' : ''}`}>\r\n        {/* Header with close button */}\r\n        <div className=\"access-header\">\r\n          <h2>Menu</h2>\r\n          <button \r\n            onClick={closeAccessBar}\r\n            className=\"close-btn\"\r\n            aria-label=\"Close access menu\"\r\n          >\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Navigation Content */}\r\n        <div className=\"access-content\">\r\n\r\n          {/* Display Section */}\r\n          <div className=\"nav-section\">\r\n            <h3>Display</h3>\r\n            <div className=\"nav-items\">\r\n              {/* Radio buttons for display mode */}\r\n              <div className=\"radio-group\">\r\n                <label className=\"radio-option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"displayMode\"\r\n                    value=\"all\"\r\n                    checked={displayMode === 'all'}\r\n                    onChange={() => handleDisplayModeChange('all')}\r\n                  />\r\n                  <span>All IDs</span>\r\n                </label>\r\n                \r\n                <label className=\"radio-option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"displayMode\"\r\n                    value=\"specific\"\r\n                    checked={displayMode === 'specific'}\r\n                    onChange={() => handleDisplayModeChange('specific')}\r\n                  />\r\n                  <span>Specific IDs</span>\r\n                </label>\r\n              </div>\r\n\r\n              {/* Specific IDs input section */}\r\n              {displayMode === 'specific' && (\r\n                <div className=\"specific-ids-section\">\r\n                  <div className=\"id-input-container\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={newId}\r\n                      onChange={(e) => setNewId(e.target.value)}\r\n                      onKeyPress={handleKeyPress}\r\n                      placeholder=\"Enter ID\"\r\n                      className=\"id-input\"\r\n                    />\r\n                    <div className=\"action-buttons\">\r\n                      <button\r\n                        onClick={addToIncludeIds}\r\n                        className=\"include-id-btn\"\r\n                        disabled={!newId.trim() || isIdDuplicate()}\r\n                      >\r\n                        Include\r\n                      </button>\r\n                      <button\r\n                        onClick={addToExcludeIds}\r\n                        className=\"exclude-id-btn\"\r\n                        disabled={!newId.trim() || isIdDuplicate()}\r\n                      >\r\n                        Exclude\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Display duplicate warning */}\r\n                  {isIdDuplicate() && (\r\n                    <div className=\"duplicate-warning\">\r\n                      ID already exists in one of the lists\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Display list of include IDs */}\r\n                  {includeIds.length > 0 && (\r\n                    <div className=\"ids-list\">\r\n                      <h4 className=\"list-title include-title\">Include IDs (Show Only These)</h4>\r\n                      {includeIds.map((id, index) => (\r\n                        <div key={index} className=\"id-item include-id\">\r\n                          <span className=\"id-text\">{id}</span>\r\n                          <button\r\n                            onClick={() => removeFromIncludeIds(id)}\r\n                            className=\"delete-id-btn\"\r\n                            aria-label={`Delete ID ${id}`}\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Display list of exclude IDs */}\r\n                  {excludeIds.length > 0 && (\r\n                    <div className=\"ids-list\">\r\n                      <h4 className=\"list-title exclude-title\">Exclude IDs (Hide These)</h4>\r\n                      {excludeIds.map((id, index) => (\r\n                        <div key={index} className=\"id-item exclude-id\">\r\n                          <span className=\"id-text\">{id}</span>\r\n                          <button\r\n                            onClick={() => removeFromExcludeIds(id)}\r\n                            className=\"delete-id-btn\"\r\n                            aria-label={`Delete ID ${id}`}\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Action buttons */}\r\n                  {totalIds > 0 && (\r\n                    <div className=\"filter-actions\">\r\n                      <button \r\n                        onClick={applySpecificIdsFilter}\r\n                        className=\"apply-filter-btn\"\r\n                      >\r\n                        Apply Filter ({totalIds} IDs)\r\n                      </button>\r\n                      \r\n                      <button \r\n                        onClick={clearAllSpecificIds}\r\n                        className=\"clear-all-btn\"\r\n                      >\r\n                        <RefreshCw size={16} />\r\n                        Clear All\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccessBar;","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './InstallationPage.css';\r\n\r\nfunction InstallationPage() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleDownload = (filename, url) => {\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const downloadData = [\r\n    {\r\n      os: 'Windows',\r\n      icon: '🪟',\r\n      version: '11/10/8',\r\n      filename: 'TrackVision-Setup-Windows.exe',\r\n      size: '124 MB',\r\n      url: 'https://drive.google.com/uc?export=download&id=17QnycGIJuwG9kJ0HWhODuq-xCAfGSjCq'\r\n    },\r\n    {\r\n      os: 'macOS',\r\n      icon: '🍎',\r\n      version: 'Intel & Apple Silicon',\r\n      filename: 'TrackVision-macOS-Universal.dmg',\r\n      size: '98 MB',\r\n      url: 'https://releases.trackvision.com/v1.2.0/TrackVision-macOS-Universal.dmg'\r\n    },\r\n    {\r\n      os: 'Ubuntu/Debian',\r\n      icon: '🐧',\r\n      version: '20.04+',\r\n      filename: 'TrackVision-Linux-amd64.deb',\r\n      size: '87 MB',\r\n      url: 'https://releases.trackvision.com/v1.2.0/TrackVision-Linux-amd64.deb'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"installation-container\">\r\n      <header className=\"installation-header\">\r\n        <button \r\n          onClick={() => navigate('/')}\r\n          className=\"back-button\"\r\n        >\r\n          ← Back to Home\r\n        </button>\r\n        <h1>Download TrackVision</h1>\r\n        <p className=\"header-subtitle\">Get the desktop application for enhanced performance and offline capabilities</p>\r\n      </header>\r\n\r\n      {/* <section className=\"installation-intro\">\r\n        <div className=\"intro-card\">\r\n          <h2>🚀 Desktop Application Benefits</h2>\r\n          <div className=\"benefits-grid\">\r\n            <div className=\"benefit\">\r\n              <span className=\"benefit-icon\">⚡</span>\r\n              <span>Faster video processing</span>\r\n            </div>\r\n            <div className=\"benefit\">\r\n              <span className=\"benefit-icon\">🔒</span>\r\n              <span>Offline functionality</span>\r\n            </div>\r\n            <div className=\"benefit\">\r\n              <span className=\"benefit-icon\">💾</span>\r\n              <span>Local data storage</span>\r\n            </div>\r\n            <div className=\"benefit\">\r\n              <span className=\"benefit-icon\">🎯</span>\r\n              <span>Enhanced precision tools</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section> */}\r\n\r\n      <section className=\"download-section\">\r\n        <h2>Choose Your Platform</h2>\r\n        <div className=\"download-table-container\">\r\n          <table className=\"download-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Operating System</th>\r\n                <th>Version</th>\r\n                <th>File Size</th>\r\n                <th>Download</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {downloadData.map((item, index) => (\r\n                <tr key={index} className=\"download-row\">\r\n                  <td className=\"os-column\">\r\n                    <span className=\"os-icon\">{item.icon}</span>\r\n                    <span className=\"os-name\">{item.os}</span>\r\n                  </td>\r\n                  <td className=\"version-column\">{item.version}</td>\r\n                  <td className=\"size-column\">{item.size}</td>\r\n                  <td className=\"download-column\">\r\n                    <button\r\n                      onClick={() => handleDownload(item.filename, item.url)}\r\n                      className=\"download-btn\"\r\n                    >\r\n                      <span className=\"download-icon\">⬇️</span>\r\n                      Download\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </section>\r\n    \r\n       <section className=\"installation-steps\">\r\n              <h2>Installation Guide</h2>\r\n                <div className=\"steps-container\">\r\n\r\n                <div className=\"step-card\">\r\n                    <div className=\"step-header\">\r\n                    <span className=\"step-number\">01</span>\r\n                    <h3>Download & Extract</h3>\r\n                    </div>\r\n                    <p>\r\n                    Download the backend package for your operating system from the links provided above. \r\n                    The backend is a standalone executable that does not require installation. \r\n                    Just double-click (or run via terminal) to start it. \r\n                    For macOS and Linux, you may need to set execute permissions using <code>chmod +x filename</code>.\r\n                    Extract the files to a folder of your choice.\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"step-card\">\r\n                    <div className=\"step-header\">\r\n                    <span className=\"step-number\">02</span>\r\n                    <h3>System Requirements</h3>\r\n                    </div>\r\n                    <p>\r\n                    Ensure your system has the following:\r\n                    <ul>\r\n                        <li>At least 4 GB RAM</li>\r\n                        <li>Internet connection (optional, only for updates)</li>\r\n                        <li>A modern web browser to access the frontend</li>\r\n                    </ul>\r\n                    No additional dependencies or installations are needed for the backend executable.\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"step-card\">\r\n                    <div className=\"step-header\">\r\n                    <span className=\"step-number\">03</span>\r\n                    <h3>Run the Backend</h3>\r\n                    </div>\r\n                    <p>\r\n                    Open the folder and run the backend executable:\r\n                    <ul>\r\n                        <li>Windows: <code>app.exe</code></li>\r\n                        <li>Mac: <code>./app_mac</code></li>\r\n                        <li>Linux: <code>./app_linux</code></li>\r\n                    </ul>\r\n                    A terminal window will appear showing logs of the backend server. Keep it running while using the frontend.\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"step-card\">\r\n                    <div className=\"step-header\">\r\n                    <span className=\"step-number\">04</span>\r\n                    <h3>Access the Frontend</h3>\r\n                    </div>\r\n                    <p>\r\n                    Open your web browser and go to <a href=\"https://sparshhgupta.github.io/trackvision.gui/\">the frontend website</a>. \r\n                    The frontend will automatically connect to the backend running on your machine.\r\n                    Perform your tasks as usual.\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"step-card\">\r\n                    <div className=\"step-header\">\r\n                    <span className=\"step-number\">05</span>\r\n                    <h3>Exit & Cleanup</h3>\r\n                    </div>\r\n                    <p>\r\n                    Once you are done, go back to the terminal running the backend and press <code>Ctrl + C</code> to stop it. \r\n                    Any temporary files created during execution will remain in the backend folder. \r\n                    Delete them manually if they are no longer needed.\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"step-card\">\r\n                    <div className=\"step-header\">\r\n                    <span className=\"step-number\">06</span>\r\n                    <h3>Support & Updates</h3>\r\n                    </div>\r\n                    <p>\r\n                    For updates, bug reports, or support, visit our <a href=\"https://github.com/sparshhgupta/trackvision.gui\">GitHub repository</a>. \r\n                    New releases of the backend executable will be available here.\r\n                    </p>\r\n                </div>\r\n\r\n                </div>\r\n\r\n        {/* <h2>Installation Guide</h2>\r\n        <div className=\"steps-container\">\r\n          <div className=\"step-card\">\r\n            <div className=\"step-header\">\r\n              <span className=\"step-number\">01</span>\r\n              <h3>Download & Extract</h3>\r\n            </div>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\r\n          </div>\r\n\r\n          <div className=\"step-card\">\r\n            <div className=\"step-header\">\r\n              <span className=\"step-number\">02</span>\r\n              <h3>System Requirements</h3>\r\n            </div>\r\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n          </div>\r\n\r\n          <div className=\"step-card\">\r\n            <div className=\"step-header\">\r\n              <span className=\"step-number\">03</span>\r\n              <h3>Configuration Setup</h3>\r\n            </div>\r\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt.</p>\r\n          </div>\r\n\r\n          <div className=\"step-card\">\r\n            <div className=\"step-header\">\r\n              <span className=\"step-number\">04</span>\r\n              <h3>First Launch</h3>\r\n            </div>\r\n            <p>Explicabo nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt neque porro quisquam est.</p>\r\n          </div>\r\n\r\n          <div className=\"step-card\">\r\n            <div className=\"step-header\">\r\n              <span className=\"step-number\">05</span>\r\n              <h3>Troubleshooting</h3>\r\n            </div>\r\n            <p>Qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem ut enim ad minima veniam.</p>\r\n          </div>\r\n\r\n          <div className=\"step-card\">\r\n            <div className=\"step-header\">\r\n              <span className=\"step-number\">06</span>\r\n              <h3>Support & Updates</h3>\r\n            </div>\r\n            <p>Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur at vero eos et accusamus.</p>\r\n          </div>\r\n        </div>  */}\r\n      </section>\r\n\r\n      <section className=\"version-info\">\r\n        <div className=\"version-card\">\r\n          <h3>Current Version: v1.2.0</h3>\r\n          <p className=\"release-date\">Released: September 15, 2025</p>\r\n          <div className=\"version-highlights\">\r\n            <h4>What's New:</h4>\r\n            <ul>\r\n              <li>Enhanced batch processing performance</li>\r\n              <li>Improved CSV parsing accuracy</li>\r\n              {/* <li>New keyboard shortcuts for faster navigation</li> */}\r\n              <li>Bug fixes and stability improvements</li>\r\n              <li>In depth analysis at the end of your processing.</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"support-section\">\r\n        <div className=\"support-card\">\r\n          <h3>Need Help?</h3>\r\n          <p>Having trouble with installation or setup?</p>\r\n          <div className=\"support-links\">\r\n            <a href=\"#\" className=\"support-link\">📖 Documentation</a>\r\n            <a href=\"#\" className=\"support-link\">💬 Community Forum</a>\r\n            <a href=\"#\" className=\"support-link\">✉️ Contact Support</a>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InstallationPage;","// import React, { useState } from 'react';\r\n// import { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\r\n// import LandingPage from './components/LandingPage';\r\n// import UploadSection from './components/UploadSection';\r\n// import VideoPlayer from './components/VideoPlayer';\r\n// import DownloadCsvButton from './components/DownloadCsvButton';\r\n// import OutputsPage from './components/OutputsPage';\r\n// import './App.css';\r\n\r\n// function MainApp() {\r\n//   const [csvFile, setCsvFile] = useState(null);\r\n//   const [end_frames, setEndFrames] = useState([]);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleCsvUploadSuccess = (file, end_frames) => {\r\n//     setCsvFile(file);\r\n//     setEndFrames(end_frames);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <div className=\"sidebar\">\r\n//         <UploadSection csvFile={csvFile} onCsvUpload={handleCsvUploadSuccess} />\r\n//       </div>\r\n//       <div className=\"main\">\r\n//         <VideoPlayer csvFile={csvFile} />\r\n//       </div>\r\n//       <div className=\"actions\">\r\n//         {/* Render only if CSV is uploaded */}\r\n//         {csvFile && (\r\n//           <button \r\n//             onClick={() => navigate('/outputs')} \r\n//             className=\"go-to-outputs-btn\"\r\n//           >\r\n//             Go to Outputs\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function App() {\r\n//   return (\r\n//     <BrowserRouter>\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<LandingPage />} />\r\n//         <Route path=\"/app\" element={<MainApp />} />\r\n//         <Route path=\"/outputs\" element={<OutputsPage />} />\r\n//       </Routes>\r\n//     </BrowserRouter>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\r\nimport LandingPage from './components/LandingPage';\r\nimport UploadSection from './components/UploadSection';\r\nimport VideoPlayer from './components/VideoPlayer';\r\nimport OutputsPage from './components/OutputsPage';\r\nimport AccessBar from './components/AccessBar';\r\nimport './App.css';\r\nimport { Sun, Moon } from \"lucide-react\";\r\nimport InstallationPage from './components/InstallationPage';\r\n\r\nfunction MainApp() {\r\n  const [csvFile, setCsvFile] = useState(null);\r\n  const [end_frames, setEndFrames] = useState([]);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleCsvUploadSuccess = (file, end_frames) => {\r\n    setCsvFile(file);\r\n    setEndFrames(end_frames);\r\n  };\r\n\r\n  return (\r\n    <div className={`app ${darkMode ? \"dark-mode\" : \"light-mode\"}`}>\r\n      {/* Sidebar */}\r\n      <div className=\"sidebar\">\r\n        <UploadSection csvFile={csvFile} onCsvUpload={handleCsvUploadSuccess} />\r\n        <AccessBar />\r\n        <button \r\n          onClick={() => setDarkMode(!darkMode)} \r\n          className=\"toggle-theme-btn\"\r\n        >\r\n          {darkMode ? <Sun size={20} /> : <Moon size={20} />}\r\n        </button>\r\n      </div>\r\n\r\n      {/* <div className=\"access-bar-container\">\r\n        <AccessBar />\r\n      </div> */}\r\n\r\n      {/* Main Video Player */}\r\n      <div className=\"main\">\r\n        <VideoPlayer csvFile={csvFile} />\r\n      </div>\r\n\r\n      {/* Action Button */}\r\n      <div className=\"actions\">\r\n        {csvFile && (\r\n          <button \r\n            onClick={() => navigate('/outputs')} \r\n            className=\"go-to-outputs-btn\"\r\n          >\r\n            Go to Outputs\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    // <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<LandingPage />} />\r\n        <Route path=\"/app\" element={<MainApp />} />\r\n        <Route path=\"/outputs\" element={<OutputsPage />} />\r\n        <Route path=\"/installation\" element={<InstallationPage />} />\r\n      </Routes>\r\n    // </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { BrowserRouter, Routes, Route, useNavigate } from 'react-router-dom';\r\n// import LandingPage from './components/LandingPage';\r\n// import UploadSection from './components/UploadSection';\r\n// import VideoPlayer from './components/VideoPlayer';\r\n// import OutputsPage from './components/OutputsPage';\r\n// import AccessBar from './components/AccessBar';\r\n// import './App.css';\r\n\r\n// function MainApp() {\r\n//   const [csvFile, setCsvFile] = useState(null);\r\n//   const [end_frames, setEndFrames] = useState([]);\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleCsvUploadSuccess = (file, end_frames) => {\r\n//     setCsvFile(file);\r\n//     setEndFrames(end_frames);\r\n//   };\r\n\r\n//   // Apply theme to document root\r\n//   useEffect(() => {\r\n//     if (darkMode) {\r\n//       document.documentElement.setAttribute('data-theme', 'dark');\r\n//     } else {\r\n//       document.documentElement.removeAttribute('data-theme');\r\n//     }\r\n//   }, [darkMode]);\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       {/* Access Bar Component */}\r\n//       <AccessBar darkMode={darkMode} setDarkMode={setDarkMode} />\r\n\r\n//       {/* Sidebar */}\r\n//       <div className=\"sidebar\">\r\n//         <UploadSection onCsvUploadSuccess={handleCsvUploadSuccess} />\r\n//       </div>\r\n\r\n//       {/* Main Video Player */}\r\n//       <div className=\"main-content\">\r\n//         <VideoPlayer csvFile={csvFile} end_frames={end_frames} />\r\n//       </div>\r\n\r\n//       {/* Action Button */}\r\n//       <div className=\"action-section\">\r\n//         {csvFile && (\r\n//           <button\r\n//             onClick={() => navigate('/outputs')}\r\n//             className=\"go-to-outputs-btn\"\r\n//           >\r\n//             Go to Outputs\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function App() {\r\n//   return (\r\n//     <BrowserRouter>\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<LandingPage />} />\r\n//         <Route path=\"/main\" element={<MainApp />} />\r\n//         <Route path=\"/outputs\" element={<OutputsPage />} />\r\n//       </Routes>\r\n//     </BrowserRouter>\r\n//   );\r\n// }\r\n\r\n// export default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}